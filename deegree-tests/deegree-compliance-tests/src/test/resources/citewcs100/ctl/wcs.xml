<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns:citef="http://www.opengis.net/cite/functions"
             xmlns:gml="http://www.opengis.net/gml"
             xmlns:saxon="http://saxon.sf.net/"
             xmlns:ogc="http://www.opengis.net/ogc"
             xmlns:xs="http://www.w3.org/2001/XMLSchema"
             xmlns:parsers="http://www.occamlab.com/te/parsers"
             xmlns:wcs1-0-0="http://www.opengis.net/wcs"
             xmlns:wcs="http://www.opengis.net/wcs"
             xmlns:ctl="http://www.occamlab.com/ctl"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
             xmlns:fn="http://www.w3.org/2005/xpath-functions"
>
   <ctl:function name="citef:append-kvp">
      <ctl:param name="url-prefix"/>
      <ctl:var-params max="4" min="1"/>
      <ctl:java class="com.occamlab.ctlfns.JaxenFunction" initialized="true" method="call">
         <ctl:with-param select="'org.opengis.cite.functions.AppendKVPFunction'"/>
      </ctl:java>
   </ctl:function>
   <ctl:function name="citef:iif">
      <ctl:param name="condition"/>
      <ctl:param name="trueObject"/>
      <ctl:param name="falseObject"/>
      <ctl:java class="com.occamlab.ctlfns.JaxenFunction" initialized="true" method="call">
         <ctl:with-param select="'org.opengis.cite.functions.IIfFunction'"/>
      </ctl:java>
   </ctl:function>
   <ctl:parser name="parsers:HeadersParser">
      <ctl:java class="com.occamlab.te.parsers.HeadersParser" method="parse"/>
   </ctl:parser>
   <ctl:parser name="wcs1-0-0:XMLValidatingParser.original">
      <ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse"
                initialized="true">
         <ctl:with-param name="schemas_links">
            <parsers:schemas xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
               <parsers:schema type="resource">xsd/wcs/1.0.0_o/wcsWrapper.xsd</parsers:schema>
            </parsers:schemas>
         </ctl:with-param>
      </ctl:java>
   </ctl:parser>
   <ctl:parser name="wcs1-0-0:XMLValidatingParser.corrigendum1">
      <ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse"
                initialized="true">
         <ctl:with-param name="schemas_links">
            <parsers:schemas xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
               <parsers:schema type="resource">xsd/wcs/1.0.0_c1/wcsWrapper.xsd</parsers:schema>
            </parsers:schemas>
         </ctl:with-param>
      </ctl:java>
   </ctl:parser>

   <ctl:suite name="wcs1-0-0:main_wcs1-0-0">
      <ctl:title>Web Coverage Service (WCS) 1.0.0</ctl:title>
      <ctl:description>Validates that a WCS 1.0.0 implementation meets requirements.</ctl:description>
      <ctl:link>docs/wcs/1.0.0/</ctl:link>
      <ctl:starting-test>wcs1-0-0:main</ctl:starting-test>
   </ctl:suite>

   <ctl:test name="wcs1-0-0:main">
      <ctl:param name="VAR_WCS_CAPABILITIES_URL"/>
      <!--
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_HIGH_UPDATESEQUENCE"/>
      <ctl:param name="VAR_LOW_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESX"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESY"/>
      <ctl:param name="xml"/>
      <ctl:param name="haveparameter"/>
      <ctl:param name="schemas"/>
      <ctl:param name="VAR_MULTIFILE_FORMATS"/>
      -->
      <ctl:assertion>The WCS 1.0.0 implementation being tested behaves properly</ctl:assertion>
      <ctl:code>
      <!-- wcs test url -->
      <xsl:variable name="VAR_WCS_CAPABILITIES_URL" select="$VAR_WCS_CAPABILITIES_URL"/>
      <!-- MIME header -->
      <xsl:variable name="VAR_WCS_FORMAT_1_HEADER">image/tiff</xsl:variable>
      <!-- A value that is lexically higher than the current updateSequence value-->
      <xsl:variable name="VAR_HIGH_UPDATESEQUENCE">1</xsl:variable>
      <!--A value that is lexically lower than the current updateSequence value -->
      <xsl:variable name="VAR_LOW_UPDATESEQUENCE">-1</xsl:variable>
      <!-- A value that is lexically representing RESX -->
      <xsl:variable name="VAR_WCS_COVERAGE_1_RESX">16</xsl:variable>
      <!--  A value that is lexically representing RESY -->
      <xsl:variable name="VAR_WCS_COVERAGE_1_RESY">16</xsl:variable>
      <!-- Verify that the server supports XML encoding.-->
      <xsl:variable name="xml" select="true()"/>
      <!-- Verify that the server supports range set axis -->
      <xsl:variable name="haveparameter" select="true()"/>
      <!-- The server implements the schemas from the WCS 1.0.0 corrigendum (OGC 05-076) -->
      <xsl:variable name="schemas">corrigendum1</xsl:variable>
      <!-- -->
      <xsl:variable name="VAR_MULTIFILE_FORMATS">image/tiff</xsl:variable>

         <xsl:variable name="VAR_WCS_CAPABILITIES">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_CAPABILITIES_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
            </ctl:request>
         </xsl:variable>
         <xsl:variable name="parser">
            <xsl:choose>
               <xsl:when test="$schemas = 'original'">
                  <wcs1-0-0:XMLValidatingParser.original/>
               </xsl:when>
               <xsl:otherwise>
                  <wcs1-0-0:XMLValidatingParser.corrigendum1/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:for-each select="$VAR_WCS_CAPABILITIES">
            <xsl:variable name="VAR_WCS_VERSION">
               <xsl:value-of select="string('1.0.0')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL">
               <xsl:value-of select="citef:append-kvp(wcs:WCS_Capabilities/wcs:Capability/wcs:Request/wcs:GetCapabilities/wcs:DCPType/wcs:HTTP/wcs:Get/wcs:OnlineResource/@xlink:href, '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL">
               <xsl:value-of select="citef:append-kvp(wcs:WCS_Capabilities/wcs:Capability/wcs:Request/wcs:GetCoverage/wcs:DCPType/wcs:HTTP/wcs:Get/wcs:OnlineResource/@xlink:href, '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL">
               <xsl:value-of select="citef:append-kvp(wcs:WCS_Capabilities/wcs:Capability/wcs:Request/wcs:DescribeCoverage/wcs:DCPType/wcs:HTTP/wcs:Get/wcs:OnlineResource/@xlink:href, '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL">
               <xsl:value-of select="citef:append-kvp(wcs:WCS_Capabilities/wcs:Capability/wcs:Request/wcs:GetCapabilities/wcs:DCPType/wcs:HTTP/wcs:Post/wcs:OnlineResource/@xlink:href, '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL">
               <xsl:value-of select="citef:append-kvp(wcs:WCS_Capabilities/wcs:Capability/wcs:Request/wcs:GetCoverage/wcs:DCPType/wcs:HTTP/wcs:Post/wcs:OnlineResource/@xlink:href, '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL">
               <xsl:value-of select="citef:append-kvp(wcs:WCS_Capabilities/wcs:Capability/wcs:Request/wcs:DescribeCoverage/wcs:DCPType/wcs:HTTP/wcs:Post/wcs:OnlineResource/@xlink:href, '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_1_WIDTH">
               <xsl:value-of select="string(200)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_1_HEIGHT">
               <xsl:value-of select="string(100)"/>
            </xsl:variable>
            <xsl:variable name="VAR_CURRENT_UPDATESEQUENCE">
               <xsl:value-of select="string(wcs:WCS_Capabilities/@updateSequence)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_1">
               <xsl:value-of select="string(wcs:WCS_Capabilities//wcs:CoverageOfferingBrief[1]/wcs:name)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_2">
               <xsl:value-of select="string(wcs:WCS_Capabilities//wcs:CoverageOfferingBrief[2]/wcs:name)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_WITH_COMMA">
               <xsl:value-of select="string(wcs:WCS_Capabilities//wcs:CoverageOfferingBrief[contains(wcs:name, ',')]/wcs:name)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_WITH_SPACE">
               <xsl:value-of select="string(wcs:WCS_Capabilities//wcs:CoverageOfferingBrief[contains(wcs:name, ' ')]/wcs:name)"/>
            </xsl:variable>

            <xsl:variable name="VAR_WCS_COVERAGE_1_DESCRIPTION">
               <ctl:request>
                  <ctl:url>
                     <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:url>
                  <ctl:method>get</ctl:method>
                  <ctl:param name="SERVICE">WCS</ctl:param>
                  <ctl:param name="VERSION">
                     <xsl:value-of select="$VAR_WCS_VERSION"/>
                  </ctl:param>
                  <ctl:param name="REQUEST">DescribeCoverage</ctl:param>
                  <ctl:param name="COVERAGE">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                  </ctl:param>
               </ctl:request>
            </xsl:variable>

            <xsl:variable name="updatesequence" select="string-length($VAR_CURRENT_UPDATESEQUENCE) &gt;0"/>
            <xsl:variable name="post" select="string-length($VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL) &gt;0"/>
            <xsl:variable name="supporttime" select="boolean($VAR_WCS_COVERAGE_1_DESCRIPTION//wcs:CoverageOffering//gml:timePosition)"/>
            <xsl:variable name="supporttimeperiod" select="boolean($VAR_WCS_COVERAGE_1_DESCRIPTION//wcs:CoverageOffering//wcs:timePeriod)"/>
            <xsl:variable name="kvp" select="true()"/>
            <xsl:variable name="hosturl">
               <xsl:value-of select="string('cite.opengeospatial.org')"/>
            </xsl:variable>
            <xsl:choose>
               <xsl:when test="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL = '' and $VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL = ''">
                  <ctl:message>Error: Could not read GetCapabilities online resource from capabilities document</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-general_http_request_rules-4">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-general_http_request_rules-5">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-general_http_request_rules-6">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-service_exceptions-1">
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-1">
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--                     <ctl:with-param name="parser" select="$parser"/> -->
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--                     <ctl:with-param name="parser" select="$parser"/> -->
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-3">
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--                     <ctl:with-param name="parser" select="$parser"/> -->
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-4">
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--                     <ctl:with-param name="parser" select="$parser"/> -->
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="string-length($VAR_WCS_COVERAGE_2) != 0">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_2"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="string-length($VAR_WCS_COVERAGE_WITH_SPACE) != 0">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_WITH_SPACE"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="string-length($VAR_WCS_COVERAGE_WITH_COMMA) != 0">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_WITH_COMMA"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-6">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-7">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and string-length($VAR_WCS_COVERAGE_2) != 0">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_2"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-6">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-7">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-1">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-2">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and string-length($VAR_WCS_COVERAGE_2) != 0">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-5">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_2"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-6">
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-7">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_response-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_response-supportedcrss-rectifiedgrid">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_response-supported_interpolations">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="not($updatesequence)">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_CURRENT_UPDATESEQUENCE" select="$VAR_CURRENT_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_LOW_UPDATESEQUENCE" select="$VAR_LOW_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_HIGH_UPDATESEQUENCE" select="$VAR_HIGH_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-5">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-6">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-7">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp and not($updatesequence)">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_CURRENT_UPDATESEQUENCE" select="$VAR_CURRENT_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_LOW_UPDATESEQUENCE" select="$VAR_LOW_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_HIGH_UPDATESEQUENCE" select="$VAR_HIGH_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-6">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-7">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and not($updatesequence)">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-1">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-2">
                        <ctl:with-param name="VAR_CURRENT_UPDATESEQUENCE" select="$VAR_CURRENT_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-3">
                        <ctl:with-param name="VAR_LOW_UPDATESEQUENCE" select="$VAR_LOW_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-4">
                        <ctl:with-param name="VAR_HIGH_UPDATESEQUENCE" select="$VAR_HIGH_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-5">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-6">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-7">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-sections">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="method" select="'get'"/>
                     <ctl:with-param name="type" select="'KVP'"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-sections">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="method" select="'post'"/>
                        <ctl:with-param name="type" select="'KVP'"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-sections">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="method" select="'post'"/>
                        <ctl:with-param name="type" select="'XML'"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_response-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-4">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>

                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESX" select="$VAR_WCS_COVERAGE_1_RESX"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESY" select="$VAR_WCS_COVERAGE_1_RESY"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_RESX" select="$VAR_WCS_COVERAGE_1_RESX"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_RESY" select="$VAR_WCS_COVERAGE_1_RESY"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-domainsubset-post-xml-rectifiedgrid">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--                        <ctl:with-param name="parser" select="$parser"/> -->
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--                        <ctl:with-param name="parser" select="$parser"/> -->
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--                        <ctl:with-param name="parser" select="$parser"/> -->
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--                        <ctl:with-param name="parser" select="$parser"/> -->
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$supporttimeperiod">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-period">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="method">get</ctl:with-param>
                        <ctl:with-param name="type">KVP</ctl:with-param>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $supporttimeperiod">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-period">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="method">post</ctl:with-param>
                        <ctl:with-param name="type">KVP</ctl:with-param>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $supporttimeperiod">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-period">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="method">post</ctl:with-param>
                        <ctl:with-param name="type">XML</ctl:with-param>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_response-encoding-supportedFormats">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL" select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL" select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_response-multifile_payloads">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL" select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL" select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_MULTIFILE_FORMATS" select="$VAR_MULTIFILE_FORMATS"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-partial-get-kvp">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-partial-post-kvp">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-partial-post-xml">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-inside-get-kvp">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-inside-post-kvp">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-inside-post-xml">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-forbidden">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-forbidden">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESX" select="$VAR_WCS_COVERAGE_1_RESX"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESY" select="$VAR_WCS_COVERAGE_1_RESY"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-none-resolutions">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESX" select="$VAR_WCS_COVERAGE_1_RESX"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESY" select="$VAR_WCS_COVERAGE_1_RESY"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-none-response_crs">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-each_interpolation_method">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-general_http_request_rules-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request contains a parameter which is not defined by the spec, the result is valid.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.3.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.3.2.2_Parameter_ordering_and_case</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="BoGuS">ignored</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(local-name(/*[1])='WCS_Capabilities' and namespace-uri(/*[1])='http://www.opengis.net/wcs'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-general_http_request_rules-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request contains a parameter which is not defined by the spec, the result is valid.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /CoverageDescription exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.3.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.3.2.2_Parameter_ordering_and_case</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BoGuS">ignored</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='CoverageDescription']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-general_http_request_rules-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request contains a parameter which is not defined by the spec, the result is valid.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.3.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.3.2.2_Parameter_ordering_and_case</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BoGuS">ignored</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
          </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-service_exceptions-1">
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When an Exception is returned from a request, the response must be a Service Exception that validates and has MIME type "application/vnd.ogc.se_xml".</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where content type header is application/vnd.ogc.se_xml.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.5_Service_exceptions</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <parsers:HTTPParser>
                  <parsers:parse>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                           <parsers:schema type="resource">xsd/wcs/1.0.0_o/exception.xsd</parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </parsers:parse>
               </parsers:HTTPParser>
            </ctl:request>
          </xsl:variable>
         <xsl:if test="not(normalize-space(substring-before(concat($request1/response/headers/header[translate(@name, 'CONTYPE', 'contype') = 'content-type'], ';'), ';'))='application/vnd.ogc.se_xml')" xmlns="">
            <ctl:fail/>
          </xsl:if>
          <!-- rb: Following test was checked in in revsion 2833, it is wrong so commented out -->
          <!-- xsl:if test="$request1/response/content/ogc:ServiceExceptionReport/ogc:ServiceException" xmlns="">
            <ctl:fail/>
         </xsl:if-->
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-1">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion>When a GetCapabilities request is made without a version number, then the response is the highest version supported.</ctl:assertion>
      <ctl:comment><![CDATA[Check that the response is not an exception]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN"/>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
<!--               <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="local-name(*)='ServiceExceptionReport'">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion>When a GetCapabilities request is made for a supported version, then the response is the requested version.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities@version = [[VAR_WCS_VERSION]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
<!--               <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(string(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]/@version)=$VAR_WCS_VERSION)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-3">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion>When a GetCapabilities request is made for a version that is unknown to the server is requested, the server sends the highest version it knows that is less than the requested version.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities@version = 1.0.0]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">1.0.2</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            <!--   <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(string(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]/@version)='1.0.0')">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-4">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion>When a GetCapabilities request is made for a version lower than any of those known to the server, the server sends the lowest version it knows.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where / WCS_Capabilities@version = 1.0.0]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">0.8.0</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
<!--               <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(string(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]/@version)='1.0.0')">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-1">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-2">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with an invalid version, the server return a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">0.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_2"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request is made with COVERAGE = name1, name2  (name1, name2 are in the Capabilities XML),  the server returns CoverageDescription  including only the requested coverage descriptions.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /*[local-name() = "CoverageDescription"]/*[local-name() = "CoverageOffering"]/*[local-name() = "name"] is the requested.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="fn:encode-for-uri($VAR_WCS_COVERAGE_1)"/>,<xsl:value-of select="fn:encode-for-uri($VAR_WCS_COVERAGE_2)"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not((concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_1, '', $VAR_WCS_COVERAGE_2, ''))  or (concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_2, '', $VAR_WCS_COVERAGE_1, '')))">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1 (name1 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1, name2 (name1 is in, and name2 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>,WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-2">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with a invalid version, the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">0.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_2"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request is made with COVERAGE = name1, name2 (name1, name2 are in the Capabilities XML), the server returns CoverageDescription  including only the requested coverage descriptions.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /*[local-name() = "CoverageDescription"]/*[local-name() = "CoverageOffering"]/*[local-name() = "name"] is the requested.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>,<xsl:value-of select="$VAR_WCS_COVERAGE_2"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not((concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_1, '', $VAR_WCS_COVERAGE_2, ''))  or (concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_2, '', $VAR_WCS_COVERAGE_1, '')))">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1 (name1 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1, name2  (name1 is in, and name2 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>,WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-1">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd"  service="WCS" >
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage>

</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-2">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with an invalid version, the server return a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd"  service="WCS"  version="0.0.0">
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage>

</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-5">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_2"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request is made with two coverages from the Capabilities XML, the server returns CoverageDescription  including only the requested coverage descriptions.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /*[local-name() = "CoverageDescription"]/*[local-name() = "CoverageOffering"]/*[local-name() = "name"] is the requested.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd" version="1.0.0" service="WCS">
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage><Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_2"/><![CDATA[</Coverage>
</DescribeCoverage >]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not((concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_1, '', $VAR_WCS_COVERAGE_2, ''))  or (concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_2, '', $VAR_WCS_COVERAGE_1, '')))">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-6">
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1 (name1 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd" version="1.0.0" service="WCS">
<Coverage>WCS_COVERAGE_NOT_DEFINED</Coverage>
</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-7">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a DescribeCoverage request is made with COVERAGE = name1, name2 (name1 is in, and name2 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd" version="1.0.0" service="WCS">
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage><Coverage>WCS_COVERAGE_NOT_DEFINED</Coverage>
</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_response-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>Each coverage offering supports at least one of these formats: GeoTIFF, HDF-EOS, DTED, NITF, GML.</ctl:assertion>
      <ctl:link title="OGC 03-065r6: cl. 8.3.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.5_SupportedFormats</ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering/wcs:supportedFormats">
            <xsl:if test="not(wcs:formats='GeoTIFF' or wcs:formats='HDF-EOS' or wcs:formats='DTED' or wcs:formats='NITF' or wcs:formats='GML')">
               <ctl:message>Coverage <xsl:value-of select="../wcs:name"/> does not support any of the formats.</ctl:message>
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_response-supportedcrss-rectifiedgrid">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>For coverages with at least one RectifiedGrid, each of its RectifiedGrids has an srsName attribute that references one of its supportedCRSs.</ctl:assertion>
      <ctl:link title="OGC 03-065r6: cl. 8.3.4.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3_DescribeCoverage_response</ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering/wcs:domainSet/wcs:spatialDomain/gml:RectifiedGrid">
            <xsl:variable name="coverage" select="../../../wcs:name"/>
            <xsl:choose>
               <xsl:when test="@srsName">
                  <xsl:variable name="srs" select="normalize-space(@srsName)"/>
                  <xsl:if test="count(../../../wcs:supportedCRSs/*[normalize-space(.)=$srs]) = 0">
                     <ctl:message>Coverage <xsl:value-of select="../../../wcs:name"/> has a RectifiedGrid with an SRS that is not one of the supportedCRSs.</ctl:message>
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:message>Coverage <xsl:value-of select="../../../wcs:name"/> has a RectifiedGrid without an srsName attribute.</ctl:message>
                  <ctl:fail/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>If the server does not advertise an updateSequence, when a GetCapabilities request is made with an UPDATESEQUENCE parameter, the UPDATESEQUENCE parameter is ignored.</ctl:assertion>
      <ctl:comment>Table 3, row 2</ctl:comment>
      <ctl:comment><![CDATA[Check for valid XML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">ignored</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_CURRENT_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to the current update sequence value, then  the server returns a valid exception (code = CurrentUpdateSequence).</ctl:assertion>
      <ctl:comment>Table 3, row 3</ctl:comment>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="CurrentUpdateSequence"]  exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_CURRENT_UPDATESEQUENCE"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='CurrentUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_LOW_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value lower than the current update sequence value, then the server returns capabilities XML.</ctl:assertion>
      <ctl:comment>Table 3, row 4</ctl:comment>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_LOW_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_HIGH_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value higher than the current update sequence value, then the server returns a service exception (code="InvalidUpdateSequence ").</ctl:assertion>
      <ctl:comment>Table 3, row 5</ctl:comment>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="InvalidUpdateSequence"] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_HIGH_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='InvalidUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without an UPDATESEQUENCE parameter set, then the server returns most recent capabilities XML.</ctl:assertion>
      <ctl:comment>Table 3, row 1</ctl:comment>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>  When a GetCapabilities request is made without a SECTION parameter, then the entire capabilities are returned.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made with a SECTION parameter set  to a value as  "/", then the entire capabilities are returned.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="SeCtIoN">/</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>If the server does not advertise an updateSequence, when a GetCapabilities request is made with an UPDATESEQUENCE parameter, the UPDATESEQUENCE parameter is ignored.</ctl:assertion>
      <ctl:comment>Table 3, row 2</ctl:comment>
      <ctl:comment><![CDATA[Check for valid  XML where /WC_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">ignored</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_CURRENT_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to the current update sequence value, then  the server returns a valid exception (code=CurrentUpdateSequence).</ctl:assertion>
      <ctl:comment>Table 3, row 3</ctl:comment>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="CurrentUpdateSequence"] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_CURRENT_UPDATESEQUENCE"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='CurrentUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_LOW_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value lower than the current update sequence value, then the server returns capabilities XML.</ctl:assertion>
      <ctl:comment>Table 3, row 4</ctl:comment>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_LOW_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_HIGH_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value higher than the current update sequence value, then the server returns a service exception (code = InvalidUpdateSequence ).</ctl:assertion>
      <ctl:comment>Table 3, row 5</ctl:comment>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="InvalidUpdateSequence "] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_HIGH_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='InvalidUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without an UPDATESEQUENCE parameter set, then the server returns most recent capabilities XML.</ctl:assertion>
      <ctl:comment>Table 3, row 1</ctl:comment>
      <ctl:comment><![CDATA[Check for XML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without a SECTION parameter, Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="SeCtIoN">/</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made with a SECTION parameter set to a value as  "/", Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeCtIoN">/</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-1">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>If the server does not advertise an updateSequence, when a GetCapabilities request is made with an updateSequence attribute, the updateSequence attribute is ignored.</ctl:assertion>
      <ctl:comment>Table 3, row 2</ctl:comment>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="ignored">
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-2">
      <ctl:param name="VAR_CURRENT_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an updateSequence attribute set to the current update sequence value, then  the server returns a valid exception (cose = CurrentUpdateSequence).</ctl:assertion>
      <ctl:comment>Table 3, row 3</ctl:comment>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code = "CurrentUpdateSequence"] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="]]><xsl:value-of select="$VAR_CURRENT_UPDATESEQUENCE"/><![CDATA["></GetCapabilities>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='CurrentUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-3">
      <ctl:param name="VAR_LOW_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an updateSequence attribute set to a value lower than the current update sequence value, then the server returns capabilities XML.</ctl:assertion>
      <ctl:comment>Table 3, row 4</ctl:comment>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="]]><xsl:value-of select="$VAR_LOW_UPDATESEQUENCE"/><![CDATA["></GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-4">
      <ctl:param name="VAR_HIGH_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an updateSequence attribute set to a value higher than the current update sequence value, then the server returns a service exception (code = InvalidUpdateSequence).</ctl:assertion>
      <ctl:comment>Table 3, row 5</ctl:comment>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code = "InvalidUpdateSequence "] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="]]><xsl:value-of select="$VAR_HIGH_UPDATESEQUENCE"/><![CDATA[">
</GetCapabilities>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='InvalidUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-5">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without an updateSequence attribute set, then the server returns most recent capabilities XML.</ctl:assertion>
      <ctl:comment>Table 3, row 1</ctl:comment>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" >
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-6">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>   When a GetCapabilities request is made without a SECTION parameter, Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" >
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-7">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>  When a GetCapabilities request is made with a SECTION parameter set to a value as  "/", Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for XML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS"  section = "/">
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_response-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>Each OnlineResource URL intended for HTTP Get requests in the capabilities document is a URL prefix that ends in a '?' or '&amp;'.</ctl:assertion>
      <ctl:comment><![CDATA[Check for XML where each /WCS_Capabilities/Capability/Request/OnlineResource@xlink:href ends in a ? or both contains a ? and ends in an &amp;.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.3_GetCapabilities_response</ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="not(count($request1//wcs:HTTP/wcs:Get/wcs:OnlineResource/@xlink:href[contains(., '?') and (substring-after(., '?') = '' or substring(., string-length(.)) = '&amp;')]) = count($request1//wcs:HTTP/wcs:Get/wcs:OnlineResource))">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX outside the defined Bounding BOX, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without a BBOX and without a TIME, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX outside the defined Bounding BOX, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without a BBOX and without a TIME, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX outside the defined Bounding BOX, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;)) - 2),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))) -2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;)) - 1),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))) -1))&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without a BBOX and without a TIME, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with coverage=name and name is not a valid coverage identifier, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with coverage=name and name is not a valid coverage identifier, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.2_sourceCoverage</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="1.0.0" service="WCS" ><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                  <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with coverage=name and name is not a valid coverage identifier, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.2_sourceCoverage</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="1.0.0" service="WCS" ><sourceCoverage>WCS_COVERAGE_NOT_DEFINED</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made without CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a CRS and CRS value is not one of the  requestResponseCRSs or requestCRSs element under the requested coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CrS">WCS_CRS_NOT_IN_REQUEST_OR_REQUESTRESPONSE_CRS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made without CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a CRS and CRS value is not one of the  requestResponseCRSs or requestCRSs element under the requested coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">WCS_CRS_NOT_IN_REQUEST_OR_REQUESTRESPONSE_CRS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a CRS and CRS value is not one of the  requestResponseCRSs or requestCRSs element under the requested coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="WCS_CRS_NOT_IN_REQUEST_OR_REQUESTRESPONSE_CRS">                        <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with EXCEPTIONS contains value  "application/vnd.ogc.se_xml", the server recognize it.
</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">NOT_LISTED_FORMAT</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with EXCEPTIONS contains value  "application/vnd.ogc.se_xml", the server recognize it.
</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">NOT_LISTED_FORMAT</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">WCS_FORMAT_INVALID</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a FORMAT, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">WCS_FORMAT_INVALID</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a FORMAT, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>WCS_FORMAT_INVALID</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a FORMAT, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESX"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESY"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a specific grid resolution, the server should return the requested content .</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.11">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.11_Grid_resolution:_RESX_RESY</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:if test="$request1//gml:Grid or $request1//gml:RectifiedGrid">
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
               <ctl:request>
                  <ctl:url>
                     <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:url>
                  <ctl:method>get</ctl:method>
                  <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                  <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                  <ctl:param name="SeRvIcE">WCS</ctl:param>
                  <ctl:param name="CrS">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                  </ctl:param>
                  <ctl:param name="FoRmAt">
                     <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                  </ctl:param>
                  <ctl:param name="ReSy">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESY"/>
                  </ctl:param>
                  <ctl:param name="CoVeRaGe">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                  </ctl:param>
                  <ctl:param name="BbOx">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
                  </ctl:param>
                  <ctl:param name="ReSx">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESX"/>
                  </ctl:param>
                  <parsers:HeadersParser/>
               </ctl:request>
            </xsl:variable>
            <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
               <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
                  <ctl:fail/>
               </xsl:if>
            </xsl:for-each>
         </xsl:if>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESX"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESY"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a specific grid resolution, the server should return the requested content .</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.11">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.11_Grid_resolution:_RESX_RESY</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:if test="$request1//gml:Grid or $request1//gml:RectifiedGrid">
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
               <ctl:request>
                  <ctl:url>
                     <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                  </ctl:url>
                  <ctl:method>post</ctl:method>
                  <ctl:param name="FoRmAt">
                     <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                  </ctl:param>
                  <ctl:param name="ReSy">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESY"/>
                  </ctl:param>
                  <ctl:param name="CrS">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                  </ctl:param>
                  <ctl:param name="ReSx">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESX"/>
                  </ctl:param>
                  <ctl:param name="CoVeRaGe">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                  </ctl:param>
                  <ctl:param name="BbOx">
                     <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
                  </ctl:param>
                  <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                  <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                  <ctl:param name="SeRvIcE">WCS</ctl:param>
                  <parsers:HeadersParser/>
               </ctl:request>
            </xsl:variable>
            <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
               <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
                  <ctl:fail/>
               </xsl:if>
            </xsl:for-each>
         </xsl:if>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a specific grid size and without a grid resolution, the server returns service exception .</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.10">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.10_Grid_size:_WIDTH_HEIGHT_DEPTH</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a specific grid size and without a grid resolution, the server returns service exception .</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low></gml:low><gml:high></gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-domainsubset-post-xml-rectifiedgrid">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>A GetCoverage request that specifies a GML RectifiedGrid in its domainSubset returns the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.5_InterpolationMethod</ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering[wcs:name=$VAR_WCS_COVERAGE_1]/wcs:domainSet/wcs:spatialDomain/gml:RectifiedGrid[1]">
            <xsl:variable name="request2">
               <ctl:request>
                  <ctl:url>
                     <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                  </ctl:url>
                  <ctl:method>post</ctl:method>
                  <ctl:header name="Content-type">text/xml</ctl:header>
                  <ctl:body>
                     <wcs:GetCoverage version="{$VAR_WCS_VERSION}" service="WCS">
                        <wcs:sourceCoverage><xsl:value-of select="$VAR_WCS_COVERAGE_1"/></wcs:sourceCoverage>
                        <wcs:domainSubset>
                           <wcs:spatialSubset>
                              <xsl:copy-of select="../gml:Envelope"/>
                              <gml:RectifiedGrid>
                                 <xsl:copy-of select="@*"/>
                                 <gml:limits>
                                    <gml:GridEnvelope>
                                       <xsl:variable name="lows" select="normalize-space(gml:limits/gml:GridEnvelope/gml:low)"/>
                                       <gml:low>
                                          <xsl:value-of select="$lows"/>
                                       </gml:low>
                                       <gml:high>
                                          <xsl:value-of select="number(substring-before($lows, ' ')) + 2"/>
                                          <xsl:value-of select="' '"/>
                                          <xsl:value-of select="number(substring-after($lows, ' ')) + 2"/>
                                       </gml:high>
                                    </gml:GridEnvelope>
                                 </gml:limits>
                                 <xsl:copy-of select="*[not(self::gml:limits)]"/>
                              </gml:RectifiedGrid>
                           </wcs:spatialSubset>
                        </wcs:domainSubset>
                        <wcs:output>
                           <wcs:format><xsl:value-of select="wcs:supportedFormats/wcs:formats[1]"/></wcs:format>
                        </wcs:output>
                     </wcs:GetCoverage>
                  </ctl:body>
                  <parsers:HeadersParser/>
               </ctl:request>
            </xsl:variable>
            <xsl:for-each select="$request2">
               <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
                  <ctl:fail/>
               </xsl:if>
            </xsl:for-each>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with an INTERPLOATIONMETHOD value that is listed in the CoverageDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.5_InterpolationMethod</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_TEMP_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='interpolationMethod'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_INTERPLATION_METHOD: <xsl:value-of select="$VAR_WCS_TEMP_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(VAR_WCS_TEMP_INTERPLATION_METHOD) != 0,string($VAR_WCS_TEMP_INTERPLATION_METHOD), &#34;nearest neighbor&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_INTERPLATION_METHOD: <xsl:value-of select="$VAR_WCS_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><interpolationMethod>]]><xsl:value-of select="$VAR_WCS_INTERPLATION_METHOD"/><![CDATA[</interpolationMethod>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a INTERPLOATIONMETHOD not listed in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.5_InterpolationMethod</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><interpolationMethod>WCS_INTERPLATION_METHOD_INVALID</interpolationMethod>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, but PARAMETER signed a value that is not defined in AxisDescription, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="{$VAR_WCS_PARAMETER}">WCS_PARAMETER_VALUE_INVALID</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, PARAMETER signed value that is defined in AxisDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='singleValue'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP1: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='min'][1]),'/',string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='max'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP2: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP2"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP3">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='res'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP3: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP3"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP4">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP3))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER_VALUE_TEMP2), &#34;/&#34;,string($VAR_WCS_PARAMETER_VALUE_TEMP3)),string($VAR_WCS_PARAMETER_VALUE_TEMP2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP4: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP4"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP1))  != 0,string($VAR_WCS_PARAMETER_VALUE_TEMP1),string($VAR_WCS_PARAMETER_VALUE_TEMP4))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER),&#34;=&#34;,string($VAR_WCS_PARAMETER_VALUE)),&#34;&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE: <xsl:value-of select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  <xsl:value-of select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, but PARAMETER signed a value that is not defined in AxisDescription, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="{$VAR_WCS_PARAMETER}">WCS_PARAMETER_VALUE_INVALID</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, PARAMETER signed value that is defined in AxisDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='singleValue'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP1: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='min'][1]),'/',string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='max'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP2: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP2"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP3">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='res'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP3: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP3"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP4">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP3))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER_VALUE_TEMP2), &#34;/&#34;,string($VAR_WCS_PARAMETER_VALUE_TEMP3)),string($VAR_WCS_PARAMETER_VALUE_TEMP2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP4: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP4"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP1))  != 0,string($VAR_WCS_PARAMETER_VALUE_TEMP1),string($VAR_WCS_PARAMETER_VALUE_TEMP4))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER),&#34;=&#34;,string($VAR_WCS_PARAMETER_VALUE)),&#34;&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE: <xsl:value-of select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                  <xsl:value-of select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, but PARAMETER signed a value that is not defined in AxisDescription, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.4_RangeSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><rangeSubset>
        <axisSubset name="]]><xsl:value-of select="$VAR_WCS_PARAMETER"/><![CDATA[">
                <singleValue>WCS_PARAMETER_VALUE_INVALID</singleValue>  </axisSubset>
</rangeSubset>

<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, PARAMETER signed value that is defined in AxisDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.4_RangeSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='singleValue'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP1: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='min'][1]),'/',string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='max'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP2: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP2"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP3">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='res'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP3: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP3"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_PARAMETER_VALUE_TEMP4">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP3))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER_VALUE_TEMP2), &#34;/&#34;,string($VAR_WCS_PARAMETER_VALUE_TEMP3)),string($VAR_WCS_PARAMETER_VALUE_TEMP2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP4: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE_TEMP4"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP1))  != 0,string($VAR_WCS_PARAMETER_VALUE_TEMP1),string($VAR_WCS_PARAMETER_VALUE_TEMP4))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE: <xsl:value-of select="$VAR_WCS_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><rangeSubset>
        <axisSubset name="]]><xsl:value-of select="$VAR_WCS_PARAMETER"/><![CDATA[">
                <singleValue>]]><xsl:value-of select="$VAR_WCS_PARAMETER_VALUE"/><![CDATA[</singleValue>        </axisSubset>
</rangeSubset>

<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with a valid RESPONSE_CRS, the server should return the requested content with this CRS.
 </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReSpOnSe_cRs">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with an invalid RESPONSE_CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReSpOnSe_cRs">WCS_COVERAGE_RESPONSE_CRS_INVALID</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with a valid RESPONSE_CRS, the server should return the requested content with this CRS.
 </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReSpOnSe_cRs">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with an invalid RESPONSE_CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReSpOnSe_cRs">WCS_COVERAGE_RESPONSE_CRS_INVALID</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with a valid RESPONSE_CRS, the server should return the requested content with this CRS.
 </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><crs>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/><![CDATA[</crs><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with an invalid RESPONSE_CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><crs>WCS_COVERAGE_RESPONSE_CRS_INVALID</crs><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-1">
<!--      <ctl:param name="VAR_WCS_VERSION"/> -->
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
<!--               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param> -->
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with an invalid version, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">0.0.1</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a version=1.0.0, the server should return the requested content (if other condition satisfied). </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion> When a GetCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
<!--               <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion>  When a GetCoverage request is made with an invalid version, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">0.0.1</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
<!--               <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a version=1.0.0, the server should return the requested content (if other condition satisfied). </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSION</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion> When a GetCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.1_Overview</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
<!--               <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
<!--      <ctl:param name="parser"/> -->
      <ctl:assertion>  When a GetCoverage request is made with a version an invalid version, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.1_Overview</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/0.0.1/getCoverage.xsd" version="0.0.1" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
<!--               <xsl:copy-of select="$parser"/> -->
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a version=1.0.0, the server should return the requested content (if other condition satisfied). </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.1_Overview</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="1.0.0" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA["><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope>         <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a VALID TIME, the server should return the requested content </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_TIME">
            <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering/wcs:domainSet">
               <xsl:choose>
                  <xsl:when test="wcs:temporalDomain">
                     <xsl:value-of select="wcs:temporalDomain/gml:timePosition[1]"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:value-of select="wcs:spatialDomain/gml:EnvelopeWithTimePeriod/gml:timePosition[1]"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_TIME: <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made WITH an invalid TIME, the server returns a service  exception.
</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="TiMe">WCS_TIME_INVALID</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a VALID TIME, the server should return the requested content </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_TIME">
            <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering/wcs:domainSet">
               <xsl:choose>
                  <xsl:when test="wcs:temporalDomain">
                     <xsl:value-of select="wcs:temporalDomain/gml:timePosition[1]"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:value-of select="wcs:spatialDomain/gml:EnvelopeWithTimePeriod/gml:timePosition[1]"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_TIME: <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made WITH an invalid TIME, the server returns a service  exception.
</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="TiMe">WCS_TIME_INVALID</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a VALID TIME, the server should return the requested content </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable name="VAR_WCS_COVERAGE_1_TIME">
            <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering/wcs:domainSet">
               <xsl:choose>
                  <xsl:when test="wcs:temporalDomain">
                     <xsl:value-of select="wcs:temporalDomain/gml:timePosition[1]"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:value-of select="wcs:spatialDomain/gml:EnvelopeWithTimePeriod/gml:timePosition[1]"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_TIME: <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><temporalSubset>
        <gml:timePosition>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/><![CDATA[</timePosition>
</temporalSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made WITH an invalid TIME, the server returns a service  exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[  <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><temporalSubset>
        <gml:timePosition>WCS_TIME_INVALID</timePosition>
</temporalSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-period">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_URL"/>
      <ctl:param name="type"/>
      <ctl:param name="method"/>
      <ctl:assertion>When a {$type} {$method} GetCoverage request is made with a valid time period, the server returns the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>

         <xsl:variable name="VAR_WCS_TEMP_CRS" select="string($request1//wcs:CoverageDescription//*[starts-with(local-name(), 'Envelope')][1]/@srsName)"/>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of select="$VAR_WCS_TEMP_CRS"/></ctl:message>

         <xsl:variable name="VAR_WCS_COVERAGE_1_CRS" select="citef:iif(string-length($VAR_WCS_TEMP_CRS) != 0, $VAR_WCS_TEMP_CRS, 'You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage')"/>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/></ctl:message>

         <xsl:variable name="VAR_WCS_FORMAT_1" select="substring-before(concat(normalize-space($request1/wcs:CoverageDescription//wcs:formats[1]), ' '), ' ')"/>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of select="$VAR_WCS_FORMAT_1"/></ctl:message>

         <xsl:variable name="VAR_WCS_COVERAGE_1_TIME">
            <xsl:for-each select="$request1/wcs:CoverageDescription//wcs:domainSet/wcs:temporalDomain/wcs:timePeriod">
               <xsl:value-of select="wcs:beginPosition"/>
               <xsl:text>/</xsl:text>
               <xsl:value-of select="wcs:endPosition"/>
               <xsl:if test="wcs:timeResolution">
                  <xsl:text>/</xsl:text>
                  <xsl:value-of select="wcs:timeResolution"/>
               </xsl:if>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_TIME: <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/></ctl:message>

         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>

         <xsl:variable name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_URL"/>
               </ctl:url>
               <ctl:method>
                  <xsl:value-of select="$method"/>
               </ctl:method>
               <xsl:choose>
                  <xsl:when test="$type='KVP'">
                     <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                     </ctl:param>
                     <ctl:param name="TiMe">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
                     </ctl:param>
                     <ctl:param name="CrS">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                     </ctl:param>
                     <ctl:param name="CoVeRaGe">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                     </ctl:param>
                     <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     </ctl:param>
                     <ctl:param name="SeRvIcE">WCS</ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                     <ctl:body>
                        <wcs:GetCoverage version="{$VAR_WCS_VERSION}" service="WCS">
                           <wcs:sourceCoverage><xsl:value-of select="$VAR_WCS_COVERAGE_1"/></wcs:sourceCoverage>
                           <wcs:domainSubset>
                              <wcs:temporalSubset>
                                 <xsl:copy-of select="$request1/wcs:CoverageDescription//wcs:domainSet/wcs:temporalDomain/wcs:timePeriod"/>
                              </wcs:temporalSubset>
                           </wcs:domainSubset>
                           <wcs:output>
                              <wcs:format><xsl:value-of select="$VAR_WCS_FORMAT_1"/></wcs:format>
                           </wcs:output>
                        </wcs:GetCoverage>
                     </ctl:body>
                  </xsl:otherwise>
               </xsl:choose>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>

         <xsl:for-each select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_response-encoding-supportedFormats">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>A valid getCoverage response is returned for each of the supportedFormats.</ctl:assertion>
      <ctl:comment><![CDATA[Check for a response with return code 200 (OK), and a return type other than XML or XML that is not a ServiceExceptionReport.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.3.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.3.2_Coverage_encoding</ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering[wcs:domainSet/wcs:spatialDomain]/wcs:supportedFormats/wcs:formats">
            <xsl:if test="not(../../preceding-sibling::wcs:CoverageOffering[wcs:domainSet/wcs:spatialDomain]/wcs:supportedFormats/wcs:formats=.)">
               <xsl:variable name="coverage" select="../../wcs:name"/>
               <xsl:variable name="crs" select="../../wcs:domainSet/wcs:spatialDomain/gml:Envelope/@srsName"/>
               <xsl:variable name="bbox">
                  <xsl:value-of select="translate(normalize-space(../../wcs:domainSet/wcs:spatialDomain/gml:Envelope/gml:pos[1]), ' ', ',')"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="translate(normalize-space(../../wcs:domainSet/wcs:spatialDomain/gml:Envelope/gml:pos[2]), ' ', ',')"/>
               </xsl:variable>
               <xsl:variable name="request2">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="CoVeRaGe">
                        <xsl:value-of select="$coverage"/>
                     </ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     </ctl:param>
                     <ctl:param name="CrS">
                        <xsl:value-of select="$crs"/>
                     </ctl:param>
                     <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$bbox"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="."/>
                     </ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     </ctl:param>
                     <ctl:param name="SeRvIcE">WCS</ctl:param>
                     <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                     <parsers:HTTPParser>
                        <parsers:parse mime="text/xml"/>
                        <parsers:parse mime="application/xml"/>
                        <parsers:parse>
                           <parsers:NullParser/>
                        </parsers:parse>
                     </parsers:HTTPParser>
                  </ctl:request>
               </xsl:variable>
               <xsl:variable name="mime" select="$request2/response/headers/header[@name='content-type']"/>
               <xsl:choose>
                  <xsl:when test="$request2/response/status/@code != 200">
                     <ctl:message>Error: The server returned HTTP status code <xsl:value-of select="$request2/response/status/@code"/> for a GetCoverage request using format <xsl:value-of select="."/> .</ctl:message>
                     <ctl:fail/>
                  </xsl:when>
                  <xsl:when test="starts-with($mime,'text/xml') or starts-with($mime,'application/xml')">
                     <xsl:if test="$request2/content/ogc:ServiceExceptionReport">
                        <ctl:message>Error: The server returned an exception for a GetCoverage request using format <xsl:value-of select="."/> .</ctl:message>
                        <ctl:fail/>
                     </xsl:if>
                  </xsl:when>
               </xsl:choose>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_response-multifile_payloads">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_MULTIFILE_FORMATS"/>
      <ctl:assertion>A valid getCoverage response is returned for each of the supportedFormats.</ctl:assertion>
      <ctl:comment><![CDATA[Check for a response with return code 200 (OK), and a return type other than XML or XML that is not a ServiceExceptionReport.]]></ctl:comment>
      <ctl:link title="OGC 05-076: cl. 9.3.3"/>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable name="formats" select="concat(' ', normalize-space($VAR_MULTIFILE_FORMATS), ' ')"/>
         <xsl:for-each select="$request1/wcs:CoverageDescription/wcs:CoverageOffering[wcs:domainSet/wcs:spatialDomain]/wcs:supportedFormats/wcs:formats[contains($formats, concat(' ', ., ' '))]">
            <xsl:if test="not(../../preceding-sibling::wcs:CoverageOffering[wcs:domainSet/wcs:spatialDomain]/wcs:supportedFormats/wcs:formats=.)">
               <xsl:variable name="coverage" select="../../wcs:name"/>
               <xsl:variable name="crs" select="../../wcs:domainSet/wcs:spatialDomain/gml:Envelope/@srsName"/>
               <xsl:variable name="bbox">
                  <xsl:value-of select="translate(normalize-space(../../wcs:domainSet/wcs:spatialDomain/gml:Envelope/gml:pos[1]), ' ', ',')"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="translate(normalize-space(../../wcs:domainSet/wcs:spatialDomain/gml:Envelope/gml:pos[2]), ' ', ',')"/>
               </xsl:variable>
               <xsl:variable name="request2">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="CoVeRaGe">
                        <xsl:value-of select="$coverage"/>
                     </ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     </ctl:param>
                     <ctl:param name="CrS">
                        <xsl:value-of select="$crs"/>
                     </ctl:param>
                     <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$bbox"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="."/>
                     </ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     </ctl:param>
                     <ctl:param name="SeRvIcE">WCS</ctl:param>
                     <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                     <parsers:HTTPParser>
                        <parsers:parse mime="text/xml"/>
                        <parsers:parse mime="application/xml"/>
                        <parsers:parse>
                           <parsers:NullParser/>
                        </parsers:parse>
                     </parsers:HTTPParser>
                  </ctl:request>
               </xsl:variable>
               <xsl:variable name="mime" select="$request2/response/headers/header[@name='content-type']"/>
               <xsl:choose>
                  <xsl:when test="$request2/response/status/@code != 200">
                     <ctl:message>Error: The server returned HTTP status code <xsl:value-of select="$request2/response/status/@code"/> for a GetCoverage request using format <xsl:value-of select="."/> .</ctl:message>
                     <ctl:fail/>
                  </xsl:when>
                  <xsl:when test="not(starts-with($mime, 'multipart'))">
                     <ctl:message>Error: The server did not return a multipart response for a GetCoverage request using format <xsl:value-of select="."/> .</ctl:message>
                     <ctl:fail/>
                  </xsl:when>
               </xsl:choose>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>


   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-sections">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_URL"/>
      <ctl:param name="method"/>
      <ctl:param name="type"/>
      <ctl:param name="parser"/>
      <ctl:assertion>The version and updateSequence attributes are omitted from all of the three capabilities sections (Service, Capability, and ContentMetadata) element when the full Capabilities XML is retrieved using the {$type} {$method}.</ctl:assertion>
      <ctl:comment><![CDATA[Check for version and updateSequence attributes on Service, Capability, and ContentMetadata]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.3.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.3.2_Service</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 7.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.3.3_Capability</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 7.3.4.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.3.4_ContentMetadata_and</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_URL"/>
               </ctl:url>
               <ctl:method>
                  <xsl:value-of select="$method"/>
               </ctl:method>
               <xsl:choose>
                  <xsl:when test="$type='KVP'">
                     <ctl:param name="VeRsIoN">
                        <xsl:value-of select="$VAR_WCS_VERSION"/>
                     </ctl:param>
                     <ctl:param name="SeRvIcE">WCS</ctl:param>
                     <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                     <ctl:body>
                        <wcs:GetCapabilities version="{$VAR_WCS_VERSION}" service="WCS"/>
                     </ctl:body>
                  </xsl:otherwise>
               </xsl:choose>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="//wcs:Service/@version">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="//wcs:Service/@updateSequence">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="//wcs:Capability/@version">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="//wcs:Capability/@updateSequence">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="//wcs:ContentMetadata/@version">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="//wcs:ContentMetadata/@updateSequence">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-partial-get-kvp">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX partly contained in the defined Bounding BOX, the server returns content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport does not exist. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.3.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.2_domainSet</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OVERLAP">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OVERLAP: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-partial-post-kvp">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a BBOX partly contained in the defined Bounding BOX, the server returns content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport does not exist. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.3.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.2_domainSet</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OVERLAP">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OVERLAP: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-partial-post-xml">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX partly contained in the defined Bounding BOX, the server returns content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport does not exist. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.3.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.2_domainSet</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;)) - 2),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))) -2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) - 1),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))) -1))&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OVERLAP_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-inside-get-kvp">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX inside the defined Bounding BOX, the server returns content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport does not exist. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.3.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.2_domainSet</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_INSIDE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))+1),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))+1),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_INSIDE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-inside-post-kvp">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX inside the defined Bounding BOX, the server returns content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport does not exist. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.3.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.2_domainSet</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_INSIDE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))+1),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))+1),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_INSIDE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-inside-post-xml">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX inside the defined Bounding BOX, the server returns content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport does not exist. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.3.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.2_domainSet</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;)) + 1),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))) + 1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) - 1),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;))) - 1))&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[<GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">                 <gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_INSIDE_POSITION_SECOND"/><![CDATA[</gml:pos>
        </gml:Envelope> <gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-none-resolutions">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESX"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESY"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>A coverage request using RESX, RESY, RESZ and INTERPOLATION=none raises an exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for for resolutions when [[VAR_WCS_INTERPLATION_METHOD]] = none - THIS IS FROM THE CORRIGENDUM]]></ctl:comment>
      <ctl:link title="OGC 05-076: cl. 9.2.2.12"></ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1//wcs:CoverageOffering">
            <xsl:if test="wcs:supportedInterpolations/wcs:interpolationMethod[text()='none']">
               <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                     <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                     <ctl:param name="SeRvIcE">WCS</ctl:param>
                     <ctl:param name="InTeRpOlAtIoN">none</ctl:param>
                     <ctl:param name="CrS">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                     </ctl:param>
                     <ctl:param name="ReSy">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESY"/>
                     </ctl:param>
                     <ctl:param name="CoVeRaGe">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                     </ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
                     </ctl:param>
                     <ctl:param name="ReSx">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESX"/>
                     </ctl:param>
                     <parsers:HeadersParser/>
                  </ctl:request>
               </xsl:variable>
               <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
                  <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
                  <xsl:if test="saxon:evaluate($expression)">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:for-each>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-none-response_crs">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>A coverage request using RESPONSE_CRS and INTERPOLATION=none raises an exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for for resolutions when [[VAR_WCS_INTERPLATION_METHOD]] = none - THIS IS FROM THE CORRIGENDUM]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.5_InterpolationMethod</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1//wcs:CoverageOffering">
            <xsl:if test="wcs:supportedInterpolations/wcs:interpolationMethod[text()='none']">
               <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="CrS">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                     </ctl:param>
                     <ctl:param name="SeRvIcE">WCS</ctl:param>
                     <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                     <ctl:param name="InTeRpOlAtIoN">none</ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     </ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                     </ctl:param>
                     <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                     <ctl:param name="CoVeRaGe">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                     </ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     </ctl:param>
                     <ctl:param name="ReSpOnSe_cRs">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
                     </ctl:param>
                     <parsers:HeadersParser/>
                  </ctl:request>
               </xsl:variable>
               <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
                  <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
                  <xsl:if test="saxon:evaluate($expression)">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:for-each>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-forbidden">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>If the only interpolation method supported is "none", a GetCoverage request that uses height and width parameters to request a coverage that is not at the native resolution returns an exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for for resolutions when [[VAR_WCS_INTERPLATION_METHOD]] = none]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.10">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.10_Grid_size:_WIDTH_HEIGHT_DEPTH</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.11">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.11_Grid_resolution:_RESX_RESY</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_TEMP_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='interpolationMethod'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_INTERPLATION_METHOD: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_TEMP_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length($VAR_WCS_TEMP_INTERPLATION_METHOD) != 0,string($VAR_WCS_TEMP_INTERPLATION_METHOD), &#34;none&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_INTERPLATION_METHOD: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1//wcs:CoverageOffering">
            <xsl:variable name="VAR_WCS_INTERPLATION_METHOD_COUNT" select="count(wcs:supportedInterpolations/wcs:interpolationMethod)"/>
            <ctl:message>INTERPLATION_METHOD_COUNT: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_INTERPLATION_METHOD_COUNT"/>
            </ctl:message>
            <xsl:if test="$VAR_WCS_INTERPLATION_METHOD_COUNT = 1">
               <xsl:if test="wcs:supportedInterpolations/wcs:interpolationMethod/text() = 'none'">
                  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
                     <ctl:request>
                        <ctl:url>
                           <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                        </ctl:url>
                        <ctl:method>get</ctl:method>
                        <ctl:param name="CrS">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                        </ctl:param>
                        <ctl:param name="SeRvIcE">WCS</ctl:param>
                        <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                        <ctl:param name="WiDtH">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        </ctl:param>
                        <ctl:param name="BbOx">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
                        </ctl:param>
                        <ctl:param name="FoRmAt">
                           <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                        </ctl:param>
                        <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                        <ctl:param name="CoVeRaGe">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                        </ctl:param>
                        <ctl:param name="HeIgHt">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        </ctl:param>
                        <ctl:param name="ReSpOnSe_cRs">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
                        </ctl:param>
                        <parsers:HeadersParser/>
                     </ctl:request>
                  </xsl:variable>
                  <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
                     <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
                     <xsl:if test="saxon:evaluate($expression)">
                        <ctl:fail/>
                     </xsl:if>
                  </xsl:for-each>
               </xsl:if>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>


   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-forbidden">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESX"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESY"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>If the only interpolation method supported is "none", a GetCoverage request that uses resolution parameters to request a coverage that is not at the native resolution returns an exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for for resolutions when [[VAR_WCS_INTERPLATION_METHOD]] = none]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.10">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.10_Grid_size:_WIDTH_HEIGHT_DEPTH</ctl:link>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.11">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.11_Grid_resolution:_RESX_RESY</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_TEMP_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='interpolationMethod'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_INTERPLATION_METHOD: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_TEMP_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length($VAR_WCS_TEMP_INTERPLATION_METHOD) != 0,string($VAR_WCS_TEMP_INTERPLATION_METHOD), &#34;none&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_INTERPLATION_METHOD: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1//wcs:CoverageOffering">
            <xsl:variable name="VAR_WCS_INTERPLATION_METHOD_COUNT" select="count(wcs:supportedInterpolations/wcs:interpolationMethod)"/>
               <ctl:message>INTERPLATION_METHOD_COUNT: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_INTERPLATION_METHOD_COUNT"/>
               </ctl:message>
               <xsl:if test="$VAR_WCS_INTERPLATION_METHOD_COUNT = 1">
                  <xsl:if test="wcs:supportedInterpolations/wcs:interpolationMethod/text() = 'none'">

                     <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
                     <ctl:request>
                        <ctl:url>
                           <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                        </ctl:url>
                        <ctl:method>get</ctl:method>
                        <ctl:param name="CrS">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                        </ctl:param>
                        <ctl:param name="SeRvIcE">WCS</ctl:param>
                        <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                        <ctl:param name="ReSy">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESY"/>
                        </ctl:param>
                        <ctl:param name="BbOx">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
                        </ctl:param>
                        <ctl:param name="FoRmAt">
                           <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                        </ctl:param>
                        <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                        <ctl:param name="CoVeRaGe">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                        </ctl:param>
                        <ctl:param name="ReSx">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESX"/>
                        </ctl:param>
                        <ctl:param name="ReSpOnSe_cRs">
                           <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
                        </ctl:param>
                        <parsers:HeadersParser/>
                     </ctl:request>
                  </xsl:variable>
                  <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
                     <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
                     <xsl:if test="saxon:evaluate($expression)">
                        <ctl:fail/>
                     </xsl:if>
                  </xsl:for-each>
               </xsl:if>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_response-supported_interpolations">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>SupportedInterpolations is absent, empty, or has a default attribute that specifies one of the child interpolation methods.</ctl:assertion>
      <ctl:link title="OGC 03-065r6: cl. 8.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3.6_SupportedInterpolations</ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$request1//wcs:CoverageOffering">
            <xsl:if test="wcs:supportedInterpolations[@default]">
               <xsl:variable name="VAR_WCS_INTERPLATION_DEFAULT_METHOD" select="wcs:supportedInterpolations/@default"/>
               <xsl:if test="not(//wcs:interpolationMethod[text()=$VAR_WCS_INTERPLATION_DEFAULT_METHOD])">
                  <ctl:message>The default interpolation method for coverage <xsl:value-of select="wcs:name"/> is not listed in the supportedInterpolations list.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-each_interpolation_method">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>For each of the advertised interpolation methods, the server returns content.</ctl:assertion>
      <ctl:link title="OGC 05-076: cl. 9.2.2.12"></ctl:link>
      <ctl:code>
         <xsl:variable name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each select="$request1//wcs:CoverageOffering">
            <xsl:for-each select="//wcs:interpolationMethod">
               <xsl:variable name="request2">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="CrS">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
                     </ctl:param>
                     <ctl:param name="SeRvIcE">WCS</ctl:param>
                     <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
                     </ctl:param>
                     <ctl:param name="VeRsIoN">1.0.0</ctl:param>
                     <ctl:param name="CoVeRaGe">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
                     </ctl:param>
                     <ctl:param name="ReSpOnSe_cRs">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
                     </ctl:param>
                     <ctl:param name="InTeRpOlAtIoN">
                        <xsl:value-of select="fn:encode-for-uri(text())"/>
                     </ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     </ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     </ctl:param>
                     <parsers:HeadersParser/>
                  </ctl:request>
               </xsl:variable>
               <xsl:if test="not(normalize-space(substring-before(concat($request2/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
                  <ctl:fail/>
               </xsl:if>
            </xsl:for-each>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
</ctl:package>
