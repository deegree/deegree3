<?xml version="1.0" encoding="UTF-8"?>
<package xmlns="http://www.occamlab.com/ctl"
         xmlns:ccf="http://www.opengis.net/cite/complex"
         xmlns:cdf="http://www.opengis.net/cite/data"
         xmlns:cgf="http://www.opengis.net/cite/geometry"
         xmlns:citef="http://www.opengis.net/cite/functions"
         xmlns:ctl="http://www.occamlab.com/ctl"
         xmlns:gml="http://www.opengis.net/gml"
         xmlns:ogc="http://www.opengis.net/ogc"
         xmlns:parsers="http://www.occamlab.com/te/parsers"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:wfs="http://www.opengis.net/wfs"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <function name="citef:version">
      <param name="version-string"/>
      <java class="com.occamlab.ctlfns.JaxenFunction" initialized="true" method="call">
         <with-param select="'org.opengis.cite.functions.Version'"/>
      </java>
   </function>
   <function name="citef:validate-gml-schema">
      <param name="base-url"/>
      <param name="schema"/>
      <var-params max="5" min="0"/>
      <java class="com.occamlab.ctlfns.GmlSchemaValidator" initialized="true"
            method="validate">
         <with-param>
            <namespaces xmlns="">
               <namespace prefix="cdf" uri="http://www.opengis.net/cite/data"/>
               <namespace prefix="cgf" uri="http://www.opengis.net/cite/geometry"/>
            </namespaces>
         </with-param>
      </java>
   </function>
   <function name="wfs:sleep">
      <param name="milliseconds"/>
      <java class="java.lang.Thread" method="sleep"/>
   </function>
   <parser name="parsers:HeadersParser">
      <java class="com.occamlab.te.parsers.HeadersParser" method="parse"/>
   </parser>
   <parser name="wfs:GMLValidatingParser">
      <java class="com.occamlab.te.parsers.GMLValidatingParser" initialized="true"
            method="parse">
         <with-param name="documentlocations">
            <documentlocations xmlns="">
               <!-- <parm> -->
               <!--    <name>http://www.galdosinc.com/xml/properties/schemaLocation</name> -->
               <!--    <value>http://schemas.opengis.net/gml/2.1.2/feature.xsd</value> -->
               <!-- </parm> -->
               <parm>
                  <name>http://www.galdosinc.com/xml/properties/schemaLocation</name>
                  <value>http://download.deegree.org/schemas/OGC-1.0.0/OGC_Wrapper.xsd</value>
               </parm>
               <parm>
                  <name>http://www.galdosinc.com/xml/properties/schemaLocation</name>
                  <value>http://download.deegree.org/schemas/WFS-1.0.0/WFS_Wrapper.xsd</value>
               </parm>
               <parm>
                  <name>http://www.galdosinc.com/xml/properties/schemaLocation</name>
                  <value>http://download.deegree.org/schemas/complexFeatures.xsd</value>
               </parm>
               <parm>
                  <name>http://www.galdosinc.com/xml/properties/schemaLocation</name>
                  <value>http://download.deegree.org/schemas/dataFeatures.xsd</value>
               </parm>
               <parm>
                  <name>http://www.galdosinc.com/xml/properties/schemaLocation</name>
                  <value>http://download.deegree.org/schemas/geometryFeatures.xsd</value>
               </parm>
            </documentlocations>
         </with-param>
      </java>
   </parser>
   <test name="wfs:main">
      <assertion>This WFS is valid</assertion>
      <code>
        <!-- ***** Hard-wired the URL and test options (everything) ***** -->
         <xsl:variable name="VAR_WFS_CAPABILITIES_URL">
            <request>
               <url>${serviceUrl}/services/wfs100?request=GetCapabilities&amp;service=WFS</url>
               <method>get</method>
            </request>
         </xsl:variable>
         <xsl:variable name="complexvalue" select="true()"/>
         <xsl:variable name="all" select="true()"/>

         <xsl:for-each select="$VAR_WFS_CAPABILITIES_URL">
            <xsl:variable name="VAR_WFS_VERSION">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/@version)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetCapabilities/wfs:DCPType/wfs:HTTP/wfs:Get)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetCapabilities/wfs:DCPType/wfs:HTTP/wfs:Get/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetCapabilities/wfs:DCPType/wfs:HTTP/wfs:Post)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetCapabilities/wfs:DCPType/wfs:HTTP/wfs:Post/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="VAR_WFS_GET_CAPABILITIES_SUPPORTED">
               <xsl:value-of select="saxon:evaluate($expression)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Get)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Get/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Post)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Post/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_SUPPORTED"/>() or <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="VAR_WFS_DESCRIBE_FEATURE_SUPPORTED">
               <xsl:value-of select="saxon:evaluate($expression)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_DESCRIBE_FEATURE_TYPE_XMLSCHEMA_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:SchemaDescriptionLanguage/wfs:XMLSCHEMA)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_HTTP_GET_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Get)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_HTTP_GET_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Get/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_HTTP_POST_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Post)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_HTTP_POST_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Post/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_SUPPORTED"/>() or <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_SUPPORTED">
               <xsl:value-of select="saxon:evaluate($expression)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_GML2_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:ResultFormat/wfs:GML2)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_GET_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock/wfs:DCPType/wfs:HTTP/wfs:Get)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_GET_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock/wfs:DCPType/wfs:HTTP/wfs:Get/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock/wfs:DCPType/wfs:HTTP/wfs:Post)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock/wfs:DCPType/wfs:HTTP/wfs:Post/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_SUPPORTED"/>() or <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_SUPPORTED"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_WITH_LOCK_SUPPORTED">
               <xsl:value-of select="saxon:evaluate($expression)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_GET_FEATURE_WITH_LOCK_GML2_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock/wfs:ResultFormat/wfs:GML2)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_TRANSACTION_HTTP_GET_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:Transaction/wfs:DCPType/wfs:HTTP/wfs:Get)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_TRANSACTION_HTTP_GET_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:Transaction/wfs:DCPType/wfs:HTTP/wfs:Get/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_TRANSACTION_HTTP_POST_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:Transaction/wfs:DCPType/wfs:HTTP/wfs:Post)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_TRANSACTION_HTTP_POST_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:Transaction/wfs:DCPType/wfs:HTTP/wfs:Post/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_GET_SUPPORTED"/>() or <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="VAR_WFS_TRANSACTION_SUPPORTED">
               <xsl:value-of select="saxon:evaluate($expression)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_LOCK_FEATURE_HTTP_GET_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:LockFeature/wfs:DCPType/wfs:HTTP/wfs:Get)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_LOCK_FEATURE_HTTP_GET_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:LockFeature/wfs:DCPType/wfs:HTTP/wfs:Get/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_LOCK_FEATURE_HTTP_POST_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:LockFeature/wfs:DCPType/wfs:HTTP/wfs:Post)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL">
               <xsl:value-of select="string(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:LockFeature/wfs:DCPType/wfs:HTTP/wfs:Post/@onlineResource)"/>
            </xsl:variable>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_GET_SUPPORTED"/>() or <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="VAR_WFS_LOCK_FEATURE_SUPPORTED">
               <xsl:value-of select="saxon:evaluate($expression)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_DELETE_GLOBALLY_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Delete)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_INSERT_GLOBALLY_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Insert)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_LOCK_GLOBALLY_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Lock)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_QUERY_GLOBALLY_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Query)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_UPDATE_GLOBALLY_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Update)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_LOGICAL_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Logical_Operators)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_SIMPLE_COMPARISON_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators/ogc:Simple_Comparisons)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_LIKE_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators/ogc:Like)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_BETWEEN_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators/ogc:Between)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_NULL_CHECK_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators/ogc:NullCheck)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WFS_ARITHMETIC_SUPPORTED">
               <xsl:value-of select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Arithmetic_Operators/ogc:Simple_Arithmetic)"/>
            </xsl:variable>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="describefeaturetypeget" select="saxon:evaluate($expression)"/>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="describefeaturetypepost" select="saxon:evaluate($expression)"/>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="getfeatureget" select="saxon:evaluate($expression)"/>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="getfeaturepost" select="saxon:evaluate($expression)"/>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_GET_FEATURE_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_TRANSACTION_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="transactional" select="saxon:evaluate($expression)"/>
            <xsl:variable name="expression">
               <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_GET_FEATURE_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_TRANSACTION_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_SUPPORTED"/>() and <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_SUPPORTED"/>()</xsl:variable>
            <xsl:variable name="lock" select="saxon:evaluate($expression)"/>
            <xsl:variable name="bbox"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:BBOX)"/>
            <xsl:variable name="beyond"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Beyond)"/>
            <xsl:variable name="contains"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Contains)"/>
            <xsl:variable name="crosses"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Crosses)"/>
            <xsl:variable name="disjoint"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Disjoint)"/>
            <xsl:variable name="dwithin"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:DWithin)"/>
            <xsl:variable name="equals"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Equals)"/>
            <xsl:variable name="intersects"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Intersect)"/>
            <xsl:variable name="overlaps"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Overlaps)"/>
            <xsl:variable name="touches"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Touches)"/>
            <xsl:variable name="within"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:Spatial_Operators/ogc:Within)"/>
            <xsl:variable name="arithmetic"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Arithmetic_Operators)"/>
            <xsl:variable name="comparison"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators)"/>
            <xsl:variable name="like"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators/ogc:Like)"/>
            <xsl:variable name="between"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators/ogc:Between)"/>
            <xsl:variable name="nullcheck"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Comparison_Operators/ogc:NullCheck)"/>
            <xsl:variable name="logical"
                          select="boolean(/wfs:WFS_Capabilities/ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:Logical_Operators)"/>
            <xsl:variable name="getfeaturewithlock"
                          select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock)"/>
            <xsl:variable name="lockfeature"
                          select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:LockFeature)"/>
            <xsl:variable name="getcapabilitiespost"
                          select="boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetCapabilities/wfs:DCPType/wfs:HTTP/wfs:Post)"/>
            <xsl:variable name="hosturl">
               <xsl:value-of select="string('cite.opengeospatial.org')"/>
            </xsl:variable>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-1">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-2">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-3">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-4">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-5">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-6">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-7">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-8">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypeget">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-get-9">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-1">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-2">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-3">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-4">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-5">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-6">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-7">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-8">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$describefeaturetypepost">
               <call-test name="wfs:test1.0.0-basic-describefeaturetype-post-9">
                  <with-param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"
                              select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-1">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-2">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-3">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-4">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-5">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-6">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-7">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <call-test name="wfs:test1.0.0-basic-getcapabilities-get-8">
               <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                           select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
            </call-test>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-1">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-2">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-3">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-4">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-5">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-6">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-7">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getcapabilitiespost">
               <call-test name="wfs:test1.0.0-basic-getcapabilities-post-8">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $complexvalue">
               <call-test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-13">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-14">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-15">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-16">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-17">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $like">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-18">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-19">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $between">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-20">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-21">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-22">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-23">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-24">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-25">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $between">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-13">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-14">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-15">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-16">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-17">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $like">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-18">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-19">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $between">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-20">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-21">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-22">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-23">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-24">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $nullcheck">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-25">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $between">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $comparison">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-13">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-14">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-15">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-16">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-17">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-18">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-13">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-14">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-15">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-16">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-17">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-18">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $bbox">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $beyond">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $contains">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $crosses">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $disjoint">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $dwithin">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $equals">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $intersects">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $overlaps">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $touches">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost and $within">
               <call-test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeatureget">
               <call-test name="wfs:test1.0.0-basic-getfeature-get-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturepost">
               <call-test name="wfs:test1.0.0-basic-getfeature-post-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lock">
               <call-test name="wfs:test1.0.0-lock-getcapabilities-get-1">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lock">
               <call-test name="wfs:test1.0.0-lock-getcapabilities-get-2">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lock and $getcapabilitiespost">
               <call-test name="wfs:test1.0.0-lock-getcapabilities-post-1">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lock and $getcapabilitiespost">
               <call-test name="wfs:test1.0.0-lock-getcapabilities-post-2">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$getfeaturewithlock">
               <call-test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-basictransactions-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-basictransactions-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-basictransactions-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-basictransactions-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-basictransactions-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-basictransactions-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockaction-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockaction-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockaction-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockaction-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-10">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-11">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-12">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-4">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-5">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-6">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-7">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-8">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$lockfeature">
               <call-test name="wfs:test1.0.0-lock-lockfeature-releaseaction-9">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-get-1">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-get-2">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-get-3">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-get-4">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getcapabilitiespost">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-post-1">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getcapabilitiespost">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-post-2">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getcapabilitiespost">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-post-3">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getcapabilitiespost">
               <call-test name="wfs:test1.0.0-transactional-getcapabilities-post-4">
                  <with-param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"
                              select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-delete-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-delete-2">
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-delete-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-insert-1">
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-insert-2">
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-insert-3">
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-update-1">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-update-2">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
            <xsl:if test="$transactional and $getfeaturepost">
               <call-test name="wfs:test1.0.0-transactional-transaction-update-3">
                  <with-param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"
                              select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
                  <with-param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"
                              select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </call-test>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <suite name="wfs:main_wfs">
      <title>Web Feature Service (WFS) 1.0.0</title>
      <description>Validates that a WFS 1.0.0 is compliant.</description>
      <starting-test>wfs:main</starting-test>
      <!--<ctl:link>data/data-wfs-1.0.0.zip</ctl:link>-->
   </suite>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-1">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made without the outputFormat specified, the result document must be an GML XML Schema document.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will not include the outputFormat attribute. The response document will be tested to check that the root element is a xs:schema element and that it conforms to the GML rules.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>',/xs:schema))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-2">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with the outputFormat XMLSCHEMA, the result document must be an GML XML schema document.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will include the outputFormat attribute with the value XMLSCHEMA. The response document will be tested to check that the root element is a xs:schema element and that it conforms to the GML rules.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
               <param name="outputFormat">XMLSCHEMA</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>',/xs:schema))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-3">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with an unsupported outputFormat 'DUMMYFORMAT', the result document must be an ogc:ServiceExceptionReport document.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will include the outputFormat attribute with the value DUMMYFORMAT. The response document will be tested to check that the root element is an ogc:ServiceExceptionReport document.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
               <param name="outputFormat">DUMMYFORMAT</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-4">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made without a TypeName, the result document must be an GML XML schema document that describes all feature types served by the WFS.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will not include the typeName. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for one feature type for each of the CITE schemas.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>',/xs:schema, 'cdf:Deletes', 'cgf:Points'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-5">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a single TypeName, the result document must be an GML XML schema document that describes the specified feature type.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will include the typeName cgf:Points. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for cgf:Points feature type.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
               <param name="typeName">cgf:Points</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>',/xs:schema, 'cgf:Points'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-6">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a multiple TypeNames in the same namespace, the result document must be an GML XML schema document that describes the specified feature types.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will include the typeName cgf:Points,cgf:Lines. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for cdf:Inserts feature types cgf:Points,cgf:Lines.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
               <param name="typeName">cgf:Points,cgf:Lines</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>',/xs:schema, 'cgf:Points', 'cgf:Lines'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-7">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a multiple TypeNames in different namespaces, the result document must be an GML XML schema document that describes the specified feature types.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will include the typeName cgf:Points,cdf:Other. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for cdf:Inserts feature types cgf:Points,cdf:Other.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
               <param name="typeName">cgf:Points,cdf:Other</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>',/xs:schema, 'cgf:Points', 'cdf:Other'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-8">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a single TypeName that does not exist, the result document must be an ogc:ServiceExceptionReport.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will include the typeName cgf:DummyFeature. The response document will be tested to check that the root element is a ogc:ServiceExceptionReport.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
               <param name="typeName">cgf:DummyFeature</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-get-9">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with multiple TypeNames with one that does not exist, the result document must be an ogc:ServiceExceptionReport.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP GET to the WFS server under test. The request will include the typeName cgf:Points,cgf:DummyFeature. The response document will be tested to check that the root element is a ogc:ServiceExceptionReport.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">DescribeFeatureType</param>
               <param name="typeName">cgf:Points,cgf:DummyFeature</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-1">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made without the outputFormat specified, the result document must be an GML XML Schema document.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will not include the outputFormat attribute. The response document will be tested to check that the root element is a xs:schema element and that it conforms to the GML rules.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
>
          </wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>',/xs:schema))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-2">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with the outputFormat XMLSCHEMA, the result document must be an GML XML schema document.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will include the outputFormat attribute with the value XMLSCHEMA. The response document will be tested to check that the root element is a xs:schema element and that it conforms to the GML rules.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="XMLSCHEMA"
  xmlns:wfs="http://www.opengis.net/wfs"
>
          </wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>',/xs:schema))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-3">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with an unsupported outputFormat 'DUMMYFORMAT', the result document must be an ogc:ServiceExceptionReport document.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will include the outputFormat attribute with the value DUMMYFORMAT. The response document will be tested to check that the root element is an ogc:ServiceExceptionReport document.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="DUMMYFORMAT"
  xmlns:wfs="http://www.opengis.net/wfs"
>
          </wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-4">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made without a TypeName, the result document must be an GML XML schema document that describes all feature types served by the WFS.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will not include the typeName. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for one feature type for each of the CITE schemas.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="XMLSCHEMA"
  xmlns:wfs="http://www.opengis.net/wfs"
>
          </wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>',/xs:schema, 'cdf:Deletes', 'cgf:Points'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-5">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a single TypeName, the result document must be an GML XML schema document that describes the specified feature type.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will include the typeName cgf:Points. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for cgf:Points feature type.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="XMLSCHEMA"
  xmlns:cgf="http://www.opengis.net/cite/geometry"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:TypeName>cgf:Points</wfs:TypeName>
</wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>',/xs:schema, 'cgf:Points'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-6">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a multiple TypeNames in the same namespace, the result document must be an GML XML schema document that describes the specified feature types.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will include the typeName cgf:Points,cgf:Lines. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for cdf:Inserts feature types cgf:Points,cgf:Lines.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="XMLSCHEMA"
  xmlns:cgf="http://www.opengis.net/cite/geometry"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:TypeName>cgf:Points</wfs:TypeName>
  <wfs:TypeName>cgf:Lines</wfs:TypeName>
</wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>',/xs:schema, 'cgf:Points', 'cgf:Lines'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-7">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a multiple TypeNames in different namespaces, the result document must be an GML XML schema document that describes the specified feature types.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will include the typeName cgf:Points,cdf:Other. The response document will be tested to check that the root element is a xs:schema element, it conforms to the GML rules and contains definitions for cdf:Inserts feature types cgf:Points,cdf:Other.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="XMLSCHEMA"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:cgf="http://www.opengis.net/cite/geometry"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:TypeName>cgf:Points</wfs:TypeName>
  <wfs:TypeName>cdf:Other</wfs:TypeName>
</wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/xs:schema) and citef:validate-gml-schema('<xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>',/xs:schema, 'cgf:Points', 'cdf:Other'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-8">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with a single TypeName that does not exist, the result document must be an ogc:ServiceExceptionReport.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will include the typeName cgf:DummyFeature. The response document will be tested to check that the root element is a ogc:ServiceExceptionReport.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="XMLSCHEMA"
  xmlns:cgf="http://www.opengis.net/cite/geometry"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:TypeName>cgf:DummyFeature</wfs:TypeName>
</wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-describefeaturetype-post-9">
      <param name="VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
      <assertion>When a wfs:DescribeFeatureType request is made with multiple TypeNames with one that does not exist, the result document must be an ogc:ServiceExceptionReport.</assertion>
      <comment><![CDATA[This test issues a wfs:DescribeFeatureType request using HTTP POST to the WFS server under test. The request will include the typeName cgf:Points,cgf:DummyFeature. The response document will be tested to check that the root element is a ogc:ServiceExceptionReport.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#DescribeFeatureType</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_DESCRIBE_FEATURE_TYPE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:DescribeFeatureType
  service="WFS"
  version="1.0.0"
  outputFormat="XMLSCHEMA"
  xmlns:cgf="http://www.opengis.net/cite/geometry"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:TypeName>cgf:Points</wfs:TypeName>
  <wfs:TypeName>cgf:DummyFeature</wfs:TypeName>
</wfs:DescribeFeatureType></body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-1">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made for a version number that the server supports, the result document must be a wfs:WFS_Capabilities with the version number equal to the version number in the request.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will define the version number to be 1.0.0. The response document will be tested to check that the version number returned in the capabilities document is the same as the requested version.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities[@version='1.0.0']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-2">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made for a version number that is greater than the version the server supports, the result document must be a wfs:WFS_Capabilities with the version number equal to the highest version number that the server supports which is less than the requested version number.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will define the version number to be 99.99.99. The response document will be tested to check that the version number returned in the capabilities document is less than 99.99.99.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">99.99.99</param>
               <param name="request">GetCapabilities</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(number(citef:version(string(/*/@version))) &lt; number(citef:version('99.99.99')))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-3">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made for a version number that is less than the version the server supports, the result document must be a wfs:WFS_Capabilities with the version number equal to the lowest version number that the server supports which is greater than the requested version number.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will define the version number to be 0.0.0 The response document will be tested to check that the version number returned in the capabilities document is greater than 0.0.0.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">0.99.99</param>
               <param name="request">GetCapabilities</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(number(citef:version(string(/*/@version))) &gt; number(citef:version('0.0.0')))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-4">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made without specifying a version number, the result document must be a wfs:WFS_Capabilities with the version number equal to the highest version number that it supports.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will noy define a version number. The response document will be tested to check that the version number returned in the capabilities document is greater than 0.0.0 (i.e. a version number was specified).]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="request">GetCapabilities</param>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(number(citef:version(string(/*/@version))) &gt; number(citef:version('0.0.0')))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-5">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a GetCapabilities request is made against basic WFS, the reponse cabilities document must define capabilities entries for the request GetCapabilities for HTTP GET, DescribeFeatureType for HTTP GET or POST and GetFeature for HTTP GET or POST.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The response document will be tested to check that the capabilities document defines the capabilities requests GetCapabilities for HTTP GET, DescribeFeature for HTTP GET or POST and GetFeature for HTTP GET or POST. This test does not test that the capabilities advertised actually work, this is done in other tests.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(
boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetCapabilities/wfs:DCPType/wfs:HTTP/wfs:Get)
and (
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Get)
  or
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Post)
)
and (
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Get)
  or
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Post)
)
                                )</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-6">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made, the result document must contain a schema description language of XMLSCHEMA for DescribeFeatureType.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the DescribeFeatureType request has a SchemaDescriptionLanguage of XMLSCHEMA.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:SchemaDescriptionLanguage/wfs:XMLSCHEMA))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-7">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made, the result document must contain a result format of GML2 for GetFeature.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the GetFeature request has a ResultFormat of GML2.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:ResultFormat/wfs:GML2))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-get-8">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a basic WFS, the result document must define the Query operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Query Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Query)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations/wfs:Query))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-1">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made for a version number that the server supports, the result document must be a wfs:WFS_Capabilities with the version number equal to the version number in the request.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will define the version number to be 1.0.0. The response document will be tested to check that the version number returned in the capabilities document is the same as the requested version.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities[@version='1.0.0']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-2">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made for a version number that is greater than the version the server supports, the result document must be a wfs:WFS_Capabilities with the version number equal to the highest version number that the server supports which is less than the requested version number.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will define the version number to be 99.99.99. The response document will be tested to check that the version number returned in the capabilities document is less than 99.99.99.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="99.99.99"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(number(citef:version(string(/*/@version))) &lt; number(citef:version('99.99.99')))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-3">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made for a version number that is less than the version the server supports, the result document must be a wfs:WFS_Capabilities with the version number equal to the lowest version number that the server supports which is greater than the requested version number.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will define the version number to be 0.99.99. The response document will be tested to check that the version number returned in the capabilities document is greater than 0.99.99.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="0.99.99"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(number(citef:version(string(/*/@version))) &gt; number(citef:version('0.99.99')))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-4">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made without specifying a version number, the result document must be a wfs:WFS_Capabilities with the version number equal to the highest version number that it supports.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The request will noy define a version number. The response document will be tested to check that the version number returned in the capabilities document is greater than 0.0.0 (i.e. a version number was specified).]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(number(citef:version(string(/*/@version))) &gt; number(citef:version('0.0.0')))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-5">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a GetCapabilities request is made against basic WFS, the reponse cabilities document must define capabilities entries for the request GetCapabilities for HTTP GET, DescribeFeatureType for HTTP GET or POST and GetFeature for HTTP GET or POST.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The response document will be tested to check that the capabilities document defines the capabilities requests GetCapabilities for HTTP GET, DescribeFeature for HTTP GET or POST and GetFeature for HTTP GET or POST. This test does not test that the capabilities advertised actually work, this is done in other tests.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(
boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetCapabilities/wfs:DCPType/wfs:HTTP/wfs:Get)
and (
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Get)
  or
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:DCPType/wfs:HTTP/wfs:Post)
)
and (
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Get)
  or
  boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:DCPType/wfs:HTTP/wfs:Post)
)
                                )</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-6">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made, the result document must contain a schema description language of XMLSCHEMA for DescribeFeatureType.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the DescribeFeatureType request has a SchemaDescriptionLanguage of XMLSCHEMA.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:DescribeFeatureType/wfs:SchemaDescriptionLanguage/wfs:XMLSCHEMA))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-7">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made, the result document must contain a result format of GML2 for GetFeature.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the GetFeature request has a ResultFormat of GML2.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeature/wfs:ResultFormat/wfs:GML2))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getcapabilities-post-8">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a basic WFS, the result document must define the Query operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Query Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Query)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations/wfs:Query))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>When a wfs:GetFeature request with a property name with a numerical predicate, the result document must contain the property with that index.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request includes a property name with a numerical xpath predicate to return the second value of the repeated resident property. The response document will be tested to check that the search feature returned contains the value 'Beth'.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:resident[2]</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:resident[
  text() = 'Beth'
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test requests a PropertyName with a numerical predicate and the feature prefix to check that the property is returned.</assertion>
      <comment><![CDATA[Each step in the path may optionally contain a predicate composed of the predicate delimiters '[' and ']' and a number indicating which child of the context node is to be selected. This allows feature properties that may be repeated to be specifically referenced.

The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.
]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:Complex/ccf:resident[2]</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:resident[
  text() = 'Beth'
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that getting the single feature of type ccf:Complex returns all of the properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[The "PropertyName" element is used to enumerate the feature properties that should be selected during a query and whose values should be included in the response to a GetFeature request.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:resident</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  count(ccf:resident) = 2
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test requests a PropertyName with an attribute axis and the feature prefix to check that the property is returned.</assertion>
      <comment><![CDATA[The final step in a path may optionally be composed of the abbreviated form of the attribute:: axis specifier, '@', and the name of a feature property encoded as the principal node type of attribute.
The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:Complex/ccf:address/ccf:Address/ccf:street/@number</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:address/ccf:Address/ccf:street/@number = '10')</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test requests a PropertyName with an attribute axis to check that the property is returned.</assertion>
      <comment><![CDATA[The final step in a path may optionally be composed of the abbreviated form of the attribute:: axis specifier, '@', and the name of a feature property encoded as the principal node type of attribute.

The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.
]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:address/ccf:Address/ccf:street/@number</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:address/ccf:Address/ccf:street/@number = '10')</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test requests a PropertyName with a single step in the path to check that the property is returned.</assertion>
      <comment><![CDATA[The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:address</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test requests a PropertyName with a single step in the path and the feature prefix to check that the property is returned.</assertion>
      <comment><![CDATA[The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:Complex/ccf:address</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test requests a PropertyName with a multiple steps in the path to check that the property is returned.</assertion>
      <comment><![CDATA[Relative location paths are composed of one or more steps separated by the path separator '/'.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:address/ccf:Address/ccf:city</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address/ccf:Address/ccf:city
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test requests a PropertyName with a multiple steps in the path and the feature prefix to check that the property is returned.

The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.</assertion>
      <comment><![CDATA[Relative location paths are composed of one or more steps separated by the path separator '/'.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">ccf:Complex</param>
               <param name="propertyname">ccf:Complex/ccf:address/ccf:Address/ccf:city</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address/ccf:Address/ccf:city
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with a property name with a numerical predicate, the result document must contain the property with that index.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request includes a property name with a numerical xpath predicate to return the second value of the repeated resident property. The response document will be tested to check that the search feature returned contains the value 'Beth'.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:resident[2]</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:resident[
  text() = 'Beth'
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test requests a PropertyName with a numerical predicate and the feature prefix to check that the property is returned.</assertion>
      <comment><![CDATA[Each step in the path may optionally contain a predicate composed of the predicate delimiters '[' and ']' and a number indicating which child of the context node is to be selected. This allows feature properties that may be repeated to be specifically referenced.

The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.
]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:Complex/ccf:resident[2]</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:resident[
  text() = 'Beth'
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that getting the single feature of type ccf:Complex returns all of the properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[The "PropertyName" element is used to enumerate the feature properties that should be selected during a query and whose values should be included in the response to a GetFeature request.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:wfs="http://www.opengis.net/wfs"
  xmlns:ogc="http://www.opengis.net/ogc"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:resident</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  count(ccf:resident) = 2
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test requests a PropertyName with an attribute axis and the feature prefix to check that the property is returned.</assertion>
      <comment><![CDATA[The final step in a path may optionally be composed of the abbreviated form of the attribute:: axis specifier, '@', and the name of a feature property encoded as the principal node type of attribute.
The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:Complex/ccf:address/ccf:Address/ccf:street/@number</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:address/ccf:Address/ccf:street/@number = '10')</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test requests a PropertyName with an attribute axis to check that the property is returned.</assertion>
      <comment><![CDATA[The final step in a path may optionally be composed of the abbreviated form of the attribute:: axis specifier, '@', and the name of a feature property encoded as the principal node type of attribute.

The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.
]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:address/ccf:Address/ccf:street/@number</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(/wfs:FeatureCollection/gml:featureMember/ccf:Complex/ccf:address/ccf:Address/ccf:street/@number = '10')</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test requests a PropertyName with a single step in the path to check that the property is returned.</assertion>
      <comment><![CDATA[The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:address</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test requests a PropertyName with a single step in the path and the feature prefix to check that the property is returned.</assertion>
      <comment><![CDATA[The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:Complex/ccf:address</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test requests a PropertyName with a multiple steps in the path to check that the property is returned.</assertion>
      <comment><![CDATA[Relative location paths are composed of one or more steps separated by the path separator '/'.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:address/ccf:Address/ccf:city</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address/ccf:Address/ccf:city
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-complexvalue-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test requests a PropertyName with a multiple steps in the path and the feature prefix to check that the property is returned.

The first step of a relative location path may correspond to the root element of the feature property being referenced or to the root element of the feature type with the next step corresponding to the root element of the feature property being referenced.</assertion>
      <comment><![CDATA[Relative location paths are composed of one or more steps separated by the path separator '/'.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:ccf="http://www.opengis.net/cite/complex"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="ccf:Complex">
    <ogc:PropertyName>ccf:Complex/ccf:address/ccf:Address/ccf:city</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/ccf:Complex[
  ccf:address/ccf:Address/ccf:city
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a number comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The <PropertyIsBetween>element is defined as a compact way of encoding a range check. The lower and upper boundary values are inclusive.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsGreaterThanOrEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E7%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsGreaterThanOrEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsGreaterThan%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-01%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsGreaterThan%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsGreaterThanOrEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-02%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsGreaterThanOrEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsLessThan operator returns the correct feature for a string comparisson with the value greater than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsLessThan%3E%3Cogc%3APropertyName%3Ecdf%3Astring2%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3Etometimes%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsLessThan%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-13">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsLessThan operator returns the correct feature for a number comparisson with the value greater than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsLessThan%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E8%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsLessThan%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-14">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsLessThan operator returns the correct feature for a date comparisson with the value greater than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsLessThan%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-03%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsLessThan%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-15">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsLessThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsLessThanOrEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Astring2%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3Esometimes%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsLessThanOrEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-16">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsLessThanOrEqualTo operator returns the correct feature for a number comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsLessThanOrEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E7%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsLessThanOrEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-17">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsLessThanOrEqualTo operator returns the correct feature for a date comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsLessThanOrEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-02%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsLessThanOrEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-18">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsLike operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The<PropertyIsLike> element is intended to encode a character string comparison operator with pattern matching. The pattern is defined by a combination of regular characters, the wildCard character, the singleChar character, and the escapeChar character. The wildCard character matches zero or more characters. The singleChar character matches exactly one character. The escapeChar character is used to escape the meaning of the wildCard, singleChar and escapeChar itself.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsLike+wildCard%3D%22*%22+singleChar%3D%22.%22+escape%3D%22%5C%22%3E%3Cogc%3APropertyName%3Ecdf%3Astring2%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3Es.met*s%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsLike%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-19">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsNotEqualTo operator returns the no features for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The<PropertyIsLike> element is intended to encode a character string comparison operator with pattern matching. The pattern is defined by a combination of regular characters, the wildCard character, the singleChar character, and the escapeChar character. The wildCard character matches zero or more characters. The singleChar character matches exactly one character. The escapeChar character is used to escape the meaning of the wildCard, singleChar and escapeChar itself.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsNotEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Astring2%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3Esometimes%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsNotEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 0 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsBetween operator returns the correct feature for a number comparisson with the boundary values set to the expected value of the property.</assertion>
      <comment><![CDATA[The <PropertyIsBetween>element is defined as a compact way of encoding a range check. The lower and upper boundary values are inclusive.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsBetween%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3Cogc%3ALowerBoundary%3E%3Cogc%3ALiteral%3E7%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3ALowerBoundary%3E%3Cogc%3AUpperBoundary%3E%3Cogc%3ALiteral%3E7%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3AUpperBoundary%3E%3C%2Fogc%3APropertyIsBetween%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-20">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsNotEqualTo operator returns the no features for a number comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsNotEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E7%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsNotEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 0 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-21">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsNotEqualTo operator returns the no features for a date comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsNotEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-02%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsNotEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 0 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-22">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null string property gml:name.</assertion>
      <comment><![CDATA[The <PropertyIsNull> element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Nulls</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3APropertyIsNull%3E%3Cogc%3APropertyName%3Egml%3Aname%3C%2Fogc%3APropertyName%3E%3C%2Fogc%3APropertyIsNull%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-23">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null string property gml:name.</assertion>
      <comment><![CDATA[The <PropertyIsNull> element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Nulls</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsNull%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3C%2Fogc%3APropertyIsNull%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-24">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null date property cdf:dates.</assertion>
      <comment><![CDATA[The <PropertyIsNull> element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Nulls</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsNull%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3C%2Fogc%3APropertyIsNull%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-25">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null geometry property gml:pointProperty.</assertion>
      <comment><![CDATA[The<PropertyIsNull>element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Nulls</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsNull%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3C%2Fogc%3APropertyIsNull%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsBetween operator returns the correct feature for a date comparisson with the boundary values set to the expected value of the property.</assertion>
      <comment><![CDATA[The <PropertyIsBetween> element is defined as a compact way of encoding a range check. The lower and upper boundary values are inclusive.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsBetween%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALowerBoundary%3E%3Cogc%3ALiteral%3E2002-12-02%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3ALowerBoundary%3E%3Cogc%3AUpperBoundary%3E%3Cogc%3ALiteral%3E2002-12-02%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3AUpperBoundary%3E%3C%2Fogc%3APropertyIsBetween%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsBetween operator returns the correct feature for a date comparisson with the boundary values set to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,>=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and<PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Astring2%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3Esometimes%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsEqualTo operator returns the correct feature for a number comparisson with the value set to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E7%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsEqualTo operator returns the correct feature for a date comparisson with the value set to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set <=,<,>,>=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsEqualTo%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-02%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsEqualTo%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThan operator returns the correct feature for a number comparisson with the value less than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsGreaterThan%3E%3Cogc%3APropertyName%3Ecdf%3Aintegers%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E6%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsGreaterThan%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThan operator returns the correct feature for a date comparisson with the value less than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsGreaterThan%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-01%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsGreaterThan%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Acdf%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2Fdata%22%3E%3Cogc%3APropertyIsGreaterThan%3E%3Cogc%3APropertyName%3Ecdf%3Adates%3C%2Fogc%3APropertyName%3E%3Cogc%3ALiteral%3E2002-12-01%3C%2Fogc%3ALiteral%3E%3C%2Fogc%3APropertyIsGreaterThan%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1 and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a number comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The <PropertyIsBetween>element is defined as a compact way of encoding a range check. The lower and upper boundary values are inclusive.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsGreaterThanOrEqualTo>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
        <ogc:Literal>7</ogc:Literal>
      </ogc:PropertyIsGreaterThanOrEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsGreaterThan>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-01</ogc:Literal>
      </ogc:PropertyIsGreaterThan>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsGreaterThanOrEqualTo>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-02</ogc:Literal>
      </ogc:PropertyIsGreaterThanOrEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsLessThan operator returns the correct feature for a string comparisson with the value greater than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsLessThan>
        <ogc:PropertyName>cdf:string2</ogc:PropertyName>
        <ogc:Literal>tometimes</ogc:Literal>
      </ogc:PropertyIsLessThan>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-13">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsLessThan operator returns the correct feature for a number comparisson with the value greater than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsLessThan>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
        <ogc:Literal>8</ogc:Literal>
      </ogc:PropertyIsLessThan>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-14">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsLessThan operator returns the correct feature for a date comparisson with the value greater than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsLessThan>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-03</ogc:Literal>
      </ogc:PropertyIsLessThan>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-15">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsLessThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsLessThanOrEqualTo>
        <ogc:PropertyName>cdf:string2</ogc:PropertyName>
        <ogc:Literal>sometimes</ogc:Literal>
      </ogc:PropertyIsLessThanOrEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-16">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsLessThanOrEqualTo operator returns the correct feature for a number comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsLessThanOrEqualTo>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
        <ogc:Literal>7</ogc:Literal>
      </ogc:PropertyIsLessThanOrEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-17">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsLessThanOrEqualTo operator returns the correct feature for a date comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsLessThanOrEqualTo>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-02</ogc:Literal>
      </ogc:PropertyIsLessThanOrEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-18">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsLike operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The<PropertyIsLike> element is intended to encode a character string comparison operator with pattern matching. The pattern is defined by a combination of regular characters, the wildCard character, the singleChar character, and the escapeChar character. The wildCard character matches zero or more characters. The singleChar character matches exactly one character. The escapeChar character is used to escape the meaning of the wildCard, singleChar and escapeChar itself.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsLike wildCard="*" singleChar="." escape="\">
        <ogc:PropertyName>cdf:string2</ogc:PropertyName>
        <ogc:Literal>s.met*s</ogc:Literal>
      </ogc:PropertyIsLike>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-19">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsNotEqualTo operator returns the no features for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The<PropertyIsLike> element is intended to encode a character string comparison operator with pattern matching. The pattern is defined by a combination of regular characters, the wildCard character, the singleChar character, and the escapeChar character. The wildCard character matches zero or more characters. The singleChar character matches exactly one character. The escapeChar character is used to escape the meaning of the wildCard, singleChar and escapeChar itself.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsNotEqualTo>
        <ogc:PropertyName>cdf:string2</ogc:PropertyName>
        <ogc:Literal>sometimes</ogc:Literal>
      </ogc:PropertyIsNotEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>


</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsBetween operator returns the correct feature for a number comparisson with the boundary values set to the expected value of the property.</assertion>
      <comment><![CDATA[The <PropertyIsBetween>element is defined as a compact way of encoding a range check. The lower and upper boundary values are inclusive.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsBetween>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
        <ogc:LowerBoundary><ogc:Literal>7</ogc:Literal></ogc:LowerBoundary>
        <ogc:UpperBoundary><ogc:Literal>7</ogc:Literal></ogc:UpperBoundary>
      </ogc:PropertyIsBetween>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-20">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsNotEqualTo operator returns the no features for a number comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsNotEqualTo>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
        <ogc:Literal>7</ogc:Literal>
      </ogc:PropertyIsNotEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>


</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-21">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsNotEqualTo operator returns the no features for a date comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsNotEqualTo>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-02</ogc:Literal>
      </ogc:PropertyIsNotEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-22">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null string property gml:name.</assertion>
      <comment><![CDATA[The <PropertyIsNull> element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
  xmlns:gml="http://www.opengis.net/gml"
>
  <wfs:Query typeName="cdf:Nulls">
    <ogc:Filter>
      <ogc:PropertyIsNull>
        <ogc:PropertyName>gml:name</ogc:PropertyName>
      </ogc:PropertyIsNull>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-23">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null string property gml:name.</assertion>
      <comment><![CDATA[The <PropertyIsNull> element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
  xmlns:gml="http://www.opengis.net/gml"
>
  <wfs:Query typeName="cdf:Nulls">
    <ogc:Filter>
      <ogc:PropertyIsNull>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
      </ogc:PropertyIsNull>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-24">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null date property cdf:dates.</assertion>
      <comment><![CDATA[The <PropertyIsNull> element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
  xmlns:gml="http://www.opengis.net/gml"
>
  <wfs:Query typeName="cdf:Nulls">
    <ogc:Filter>
      <ogc:PropertyIsNull>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
      </ogc:PropertyIsNull>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-25">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsNull operator returns the single NullFeature that has a null geometry property gml:pointProperty.</assertion>
      <comment><![CDATA[The<PropertyIsNull>element encodes an operator that checks to see if the value of its content is NULL. A NULL is equivalent to no value present. The value 0 is a valid value and is not considered NULL.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
  xmlns:gml="http://www.opengis.net/gml"
>
  <wfs:Query typeName="cdf:Nulls">
    <ogc:Filter>
      <ogc:PropertyIsNull>
        <ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
      </ogc:PropertyIsNull>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Nulls) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsBetween operator returns the correct feature for a date comparisson with the boundary values set to the expected value of the property.</assertion>
      <comment><![CDATA[The <PropertyIsBetween> element is defined as a compact way of encoding a range check. The lower and upper boundary values are inclusive.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsBetween>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:LowerBoundary><ogc:Literal>2002-12-02</ogc:Literal></ogc:LowerBoundary>
        <ogc:UpperBoundary><ogc:Literal>2002-12-02</ogc:Literal></ogc:UpperBoundary>
      </ogc:PropertyIsBetween>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsBetween operator returns the correct feature for a date comparisson with the boundary values set to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,>=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and<PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsEqualTo>
        <ogc:PropertyName>cdf:string2</ogc:PropertyName>
        <ogc:Literal>sometimes</ogc:Literal>
      </ogc:PropertyIsEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsEqualTo operator returns the correct feature for a number comparisson with the value set to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsEqualTo>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
        <ogc:Literal>7</ogc:Literal>
      </ogc:PropertyIsEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>


</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsEqualTo operator returns the correct feature for a date comparisson with the value set to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set <=,<,>,>=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsEqualTo>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-02</ogc:Literal>
      </ogc:PropertyIsEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThan operator returns the correct feature for a number comparisson with the value less than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsGreaterThan>
        <ogc:PropertyName>cdf:integers</ogc:PropertyName>
        <ogc:Literal>6</ogc:Literal>
      </ogc:PropertyIsGreaterThan>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThan operator returns the correct feature for a date comparisson with the value less than the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsGreaterThan>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-01</ogc:Literal>
      </ogc:PropertyIsGreaterThan>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-comparisonoperators-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that the PropertyIsGreaterThanOrEqualTo operator returns the correct feature for a string comparisson with the value equal to the expected value of the property.</assertion>
      <comment><![CDATA[The Common Catalog Query Language [4] defines a standard set of comparison operators. In addition to the standard set (=,<,>,<=,<=,<>) of comparison operators, this specification defines the elements <PropertyIsLike>, <PropertyIsBetween> and <PropertyIsNull>.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:Filter>
      <ogc:PropertyIsGreaterThan>
        <ogc:PropertyName>cdf:dates</ogc:PropertyName>
        <ogc:Literal>2002-12-01</ogc:Literal>
      </ogc:PropertyIsGreaterThan>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:FeatureCollection/gml:featureMember/cdf:Other) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500000%2C500000+500100%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500375%2C500000+500400%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500475%2C500000+500500%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500575%2C500000+500600%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-13">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500100%2C500000+500200%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-14">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500200%2C500000+500300%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-15">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500300%2C500000+500400%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-16">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500400%2C500000+500500%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-17">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500500%2C500000+500600%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-18">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500600%2C500000+500700%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500100%2C500000+500200%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500200%2C500000+500300%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500300%2C500000+500400%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500400%2C500000+500500%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500500%2C500000+500600%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500000+500100%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500100%2C500075+500200%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABBOX%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ABox+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500275%2C500000+500300%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ABox%3E%3C%2Fogc%3ABBOX%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500000,500000 500100,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500375,500000 500400,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500475,500000 500500,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500575,500000 500600,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-13">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500100,500000 500200,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-14">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500200,500000 500300,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-15">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500300,500000 500400,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-16">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500400,500000 500500,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-17">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500500,500000 500600,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-18">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a BBox that is outside the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500600,500000 500700,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500100,500000 500200,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500200,500000 500300,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500300,500000 500400,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500400,500000 500500,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a BBox that completely encloses the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500500,500000 500600,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500050,500000 500100,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500100,500075 500200,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-bbox-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the BBOX spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a BBox that partially encloses the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator BBOX with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:BBOX>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Box xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
    <gml:coordinates>500275,500000 500300,500100</gml:coordinates>
  </gml:Box>
</ogc:BBOX>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E501425%2C501025+501475%2C501075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E501425%2C501075+501475%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E501225%2C501025+501225%2C501075+501275%2C501050+501275%2C501025+501225%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E501525%2C501025+501550%2C501050+501575%2C501025+501525%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E501525%2C501050+501525%2C501075+501550%2C501075+501550%2C501050+501525%2C501050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LingString that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E501050%2C501050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E501325%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E501375%2C501075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ABeyond%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E501125%2C501025+501175%2C501075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ABeyond%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>501425,501025 501475,501075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>501425,501075 501475,501025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>501225,501025 501225,501075 501275,501050 501275,501025 501225,501025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>501525,501025 501550,501050 501575,501025 501525,501025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>501525,501050 501525,501075 501550,501075 501550,501050 501525,501050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LingString that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature and a distance of 10 metres, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>501050,501050</gml:coordinates>
    </gml:Point>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>501325,501025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>501375,501075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-beyond-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Beyond spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Beyond with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Beyond>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>501125,501025 501175,501075</gml:coordinates>
    </gml:LineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:Beyond>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is beyond the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500080%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is inside of or equals the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is outside of  the search feature  , the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500200%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500050+500225%2C500075+500250%2C500075+500250%2C500050+500225%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is same as the search feature., the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that equals the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that dosen't match the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500225%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that equals the search feature , the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that dosen't match the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500225%2C500150+500355%2C500145%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the part of the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is not  the complete part of the search feature  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500525%2C500125+500565%2C500175%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500525%2C500275+500675%2C500225%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the part of the search feature., the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is not enclosed by  the search feature., the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AContains%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500325%2C500125+500325%2C500275+500475%2C500250+500475%2C500325+500325%2C500125%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AContains%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is beyond the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500080,500050</gml:coordinates>
    </gml:Point>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is inside of or equals the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is outside of  the search feature  , the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500025 500200,500050 500275,500025 500225,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500050 500225,500075 500250,500075 500250,500050 500225,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is same as the search feature., the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that equals the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that dosen't match the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500525,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500225,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that equals the search feature , the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that dosen't match the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500225,500150 500355,500145</gml:coordinates>
    </gml:LineString>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the part of the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is not  the complete part of the search feature  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500525,500125 500565,500175</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500525,500275 500675,500225</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the part of the search feature., the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-contains-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Contains spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is not enclosed by  the search feature., the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Contains with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Contains>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500325,500125 500325,500275 500475,500250 500475,500325 500325,500125</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Contains>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that dosen't equals the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500150%2C500150%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is not the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500125+500225%2C500175+500275%2C500150+500275%2C500125+500225%2C500125%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is different from the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500050+500225%2C500075+500250%2C500075+500250%2C500050+500225%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500250%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point is the same as the search feature , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is not the same as the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500125%2C500325%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500175%2C500375%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature  , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that intersects with the search feature and dosen't equal  this search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500075+500175%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature   , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that intersects with the search feature and dosen't equal  it, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500050+500475%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500450%2C500075+500450%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ACrosses%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3ACrosses%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that dosen't equals the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500150,500150</gml:coordinates>
    </gml:Point>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is not the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500125 500225,500175 500275,500150 500275,500125 500225,500125</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is different from the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500050 500225,500075 500250,500075 500250,500050 500225,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500025 500250,500050 500275,500025 500225,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point is the same as the search feature , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is not the same as the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500125,500325</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500175,500375</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature  , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that intersects with the search feature and dosen't equal  this search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500075 500175,500025</gml:coordinates>
    </gml:LineString>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature   , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that intersects with the search feature and dosen't equal  it, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500050 500475,500050</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500450,500075 500450,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-crosses-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Crosses spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Crosses with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Crosses>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Crosses>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the different from the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500325%2C500125+500325%2C500275+500475%2C500250+500475%2C500325+500325%2C500125%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500200%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500050+500225%2C500075+500250%2C500075+500250%2C500050+500225%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature  , the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500150%2C500180%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature    , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different  from the search feature   , the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500325%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500375%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the different from the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500225%2C500150+500355%2C500145%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the different from the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500525%2C500125+500565%2C500175%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500525%2C500275+500675%2C500225%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADisjoint%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3ADisjoint%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the different from the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500325,500125 500325,500275 500475,500250 500475,500325 500325,500125</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500025 500200,500050 500275,500025 500225,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500050 500225,500075 500250,500075 500250,500050 500225,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature  , the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500150,500180</gml:coordinates>
    </gml:Point>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature    , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different  from the search feature   , the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500325</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500375</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the different from the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500225,500150 500355,500145</gml:coordinates>
    </gml:LineString>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the different from the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500525,500125 500565,500175</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500525,500275 500675,500225</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-disjoint-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Disjoint spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Disjoint with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Disjoint>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Disjoint>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E501425%2C501025+501475%2C501075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E501425%2C501075+501475%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E501225%2C501025+501225%2C501075+501275%2C501050+501275%2C501025+501225%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E501525%2C501025+501550%2C501050+501575%2C501025+501525%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E501525%2C501050+501525%2C501075+501550%2C501075+501550%2C501050+501525%2C501050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LingString that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E501050%2C501050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E501325%2C501025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E501375%2C501075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ADWithin%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E501125%2C501025+501175%2C501075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3Cogc%3ADistance+units%3D%22%23metre%22%3E10%3C%2Fogc%3ADistance%3E%3C%2Fogc%3ADWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>501425,501025 501475,501075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>501425,501075 501475,501025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>501225,501025 501225,501075 501275,501050 501275,501025 501225,501025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>501525,501025 501550,501050 501575,501025 501525,501025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>501525,501050 501525,501075 501550,501075 501550,501050 501525,501050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LingString that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a Point that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature and a distance of 10 metres, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>501050,501050</gml:coordinates>
    </gml:Point>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>501325,501025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>501375,501075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-dwithin-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the DWithin spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is more than 10 metres away from the search feature and a distance of 10 metres, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator DWithin with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:DWithin>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>501125,501025 501175,501075</gml:coordinates>
    </gml:LineString>
<ogc:Distance units="#metre">10</ogc:Distance>
</ogc:DWithin>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500150%2C500250%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different from the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500250%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500050+500225%2C500075+500250%2C500075+500250%2C500050+500225%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different from the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature  , the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+srsName%3D%22EPSG%3A32615%22+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the different from the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500075+500175%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the different from the search feature, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500450%2C500025+500450%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500425%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the different from the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AEquals%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500255%2C500125+500255%2C500175+500375%2C500150+500375%2C500125+500255%2C500125%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AEquals%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500150,500250</gml:coordinates>
    </gml:Point>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different from the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500025 500250,500050 500275,500025 500225,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500050 500225,500075 500250,500075 500250,500050 500225,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different from the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature  , the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint srsName="EPSG:32615" xmlns="http://www.opengis.net/cite/spatialTestSuite">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the different from the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500075 500175,500025</gml:coordinates>
    </gml:LineString>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the different from the search feature, the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500450,500025 500450,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500425,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-equals-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Equals spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the different from the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Equals with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Equals>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500255,500125 500255,500175 500375,500150 500375,500125 500255,500125</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Equals>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500250%2C500150%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search featurees, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different from the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500325+500250%2C500350+500275%2C500325+500225%2C500325%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500350+500225%2C500375+500250%2C500375+500250%2C500350+500225%2C500350%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500425%2C500125%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500475%2C500175%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineStringt that is the different from the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500325%2C500025+500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineStringt that is the different from the search feature  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500225%2C500325+500275%2C500375%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500225%2C500375+500275%2C500325%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultLineString that is the same as the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the different from the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AIntersects%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500225+500525%2C500275+500575%2C500250+500575%2C500225+500525%2C500225%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AIntersects%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500250,500150</gml:coordinates>
    </gml:Point>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search featurees, the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the different from the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500325 500250,500350 500275,500325 500225,500325</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500350 500225,500375 500250,500375 500250,500350 500225,500350</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search feature, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature, the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500425,500125</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500475,500175</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature, the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineStringt that is the different from the search feature, the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500325,500025 500375,500075</gml:coordinates>
    </gml:LineString>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineStringt that is the different from the search feature  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500225,500325 500275,500375</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500225,500375 500275,500325</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultLineString that is the same as the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-intersects-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Intersects spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the different from the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Intersects with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Intersects>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500525,500225 500525,500275 500575,500250 500575,500225 500525,500225</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Intersects>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500250%2C500450%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is  a Polygon that overlaps with the search feature., the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500250%2C500075+500300%2C500075+500300%2C500025+500250%2C500025+500250%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that dosen't intersect with the search feature., the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500325+500250%2C500350+500275%2C500325+500225%2C500325%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500350+500225%2C500375+500250%2C500375+500250%2C500350+500225%2C500350%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that  intersects with the search feature., the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500500%2C500025+500550%2C500025+500525%2C500050+500500%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500500%2C500050+500550%2C500050+500550%2C500075+500500%2C500075+500500%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500225%2C500125%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500275%2C500175%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as  the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the different from the search feature and without any intersection with it.  , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500325%2C500225+500375%2C500275%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the portion of the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500150%2C500050+500200%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the different from the search feature and without any intersection with it.  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500225%2C500425+500275%2C500475%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500225%2C500475+500275%2C500425%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the portion of the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500450%2C500050+500487.5%2C500012.5%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500450%2C500050+500487.5%2C500062.5%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that dosen't intersect with the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AOverlaps%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500425%2C500225+500425%2C500275+500475%2C500250+500475%2C500225+500425%2C500225%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AOverlaps%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different from the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500250,500450</gml:coordinates>
    </gml:Point>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is  a Polygon that overlaps with the search feature., the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500250,500075 500300,500075 500300,500025 500250,500025 500250,500075</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that dosen't intersect with the search feature., the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500325 500250,500350 500275,500325 500225,500325</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500350 500225,500375 500250,500375 500250,500350 500225,500350</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that  intersects with the search feature., the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500500,500025 500550,500025 500525,500050 500500,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500500,500050 500550,500050 500550,500075 500500,500075 500500,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature, the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500225,500125</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500275,500175</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as  the search feature, the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the different from the search feature and without any intersection with it.  , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500325,500225 500375,500275</gml:coordinates>
    </gml:LineString>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the portion of the search feature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500150,500050 500200,500100</gml:coordinates>
    </gml:LineString>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the different from the search feature and without any intersection with it.  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500225,500425 500275,500475</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500225,500475 500275,500425</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the portion of the search feature, the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500450,500050 500487.5,500012.5</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500450,500050 500487.5,500062.5</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-overlaps-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Overlaps spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that dosen't intersect with the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Overlaps with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Overlaps>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500425,500225 500425,500275 500475,500250 500475,500225 500425,500225</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Overlaps>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that touches the search feature along a boundary., the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500075+500225%2C500025+500175%2C500025+500175%2C500075+500225%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search  feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that  touches the search feature along a boundary, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500475%2C500100+500525%2C500100+500500%2C500075+500475%2C500100%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500475%2C500075+500475%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different point feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500250%2C500350%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500225%2C500325%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500275%2C500375%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature.  , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LingString that touches the search ferature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500075+500150%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature   , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that dosen't equal the search feature and it intersects with the search feature  , the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500425%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500475%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3ATouches%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3ATouches%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that touches the search feature along a boundary., the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500075 500225,500025 500175,500025 500175,500075 500225,500075</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is the same as the search  feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that  touches the search feature along a boundary, the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500475,500100 500525,500100 500500,500075 500475,500100</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500475,500075 500475,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the different point feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500250,500350</gml:coordinates>
    </gml:Point>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the same as the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is the different from the search feature , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500225,500325</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500275,500375</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the same as the search feature.  , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LingString that touches the search ferature, the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500075 500150,500050</gml:coordinates>
    </gml:LineString>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that is the same as the search feature   , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is a MultiLineString that dosen't equal the search feature and it intersects with the search feature  , the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500425,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500475,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-touches-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Touches spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is the same as the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Touches with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Touches>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Touches>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is not the same as the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500250%2C500150%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is inside of the polygon feature., the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+500225%2C500075+500275%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon is outside of the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500025+50025%2C500050+500275%2C500025+500225%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500050+500225%2C500075+500250%2C500075+500250%2C500050+500225%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is inside of  the search feature., the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPolygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500025+500550%2C500050+500575%2C500025+500525%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3Cgml%3ApolygonMember%3E%3Cgml%3APolygon%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500525%2C500050+500525%2C500075+500550%2C500075+500550%2C500050+500525%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fgml%3ApolygonMember%3E%3C%2Fgml%3AMultiPolygon%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature , the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Points</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3ApointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500050%2C500050%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is not the same as the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500225%2C500325%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500275%2C500375%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is  the same as the search feature , the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MPoints</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiPointProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiPoint+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500325%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3Cgml%3ApointMember%3E%3Cgml%3APoint%3E%3Cgml%3Acoordinates%3E500375%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2Fgml%3ApointMember%3E%3C%2Fgml%3AMultiPoint%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is not inside of the search feature , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500175%2C500125+500225%2C500475%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the portion of the search feature , the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Lines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AlineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3ALineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3Acoordinates%3E500125%2C500025+500175%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is MultiLineString that is beyond the search  feature.  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500225%2C500025+500275%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500225%2C500075+500275%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is MultiLineString that is the portion of the search feature., the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:MLines</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3AmultiLineStringProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3AMultiLineString+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500025+500475%2C500075%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3Cgml%3AlineStringMember%3E%3Cgml%3ALineString%3E%3Cgml%3Acoordinates%3E500425%2C500075+500475%2C500025%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALineString%3E%3C%2Fgml%3AlineStringMember%3E%3C%2Fgml%3AMultiLineString%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is outside of the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP GET to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cgf:Polygons</param>
               <param name="filter">%3Cogc%3AFilter+xmlns%3Aogc%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3Cogc%3AWithin%3E%3Cogc%3APropertyName%3Egml%3ApolygonProperty%3C%2Fogc%3APropertyName%3E%3Cgml%3APolygon+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fcite%2FspatialTestSuite%22+srsName%3D%22EPSG%3A32615%22%3E%3Cgml%3AouterBoundaryIs%3E%3Cgml%3ALinearRing%3E%3Cgml%3Acoordinates%3E500225%2C500125+500225%2C500175+500275%2C500150+500275%2C500125+500225%2C500125%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3AouterBoundaryIs%3E%3C%2Fgml%3APolygon%3E%3C%2Fogc%3AWithin%3E%3C%2Fogc%3AFilter%3E</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is not the same as the search feature  , the result document must not  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500250,500150</gml:coordinates>
    </gml:Point>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is inside of the polygon feature., the result document must  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500025 500225,500075 500275,500050 500275,500025 500225,500025</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon is outside of the search feature, the result document must not  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500025 500025,500050 500275,500025 500225,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500225,500050 500225,500075 500250,500075 500250,500050 500225,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPolygonProperty on a cgf:MPolygons comparing a value that is a MultiPolygon that is inside of  the search feature., the result document must  match the feature t0005.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPolygons">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:multiPolygonProperty</ogc:PropertyName>
<gml:MultiPolygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500025 500550,500050 500575,500025 500525,500025</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
      <gml:polygonMember>
        <gml:Polygon>
          <gml:outerBoundaryIs>
            <gml:LinearRing>
              <gml:coordinates>500525,500050 500525,500075 500550,500075 500550,500050 500525,500050</gml:coordinates>
            </gml:LinearRing>
          </gml:outerBoundaryIs>
        </gml:Polygon>
      </gml:polygonMember>
    </gml:MultiPolygon>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPolygons/cgf:id[text() = 't0005']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:pointProperty on a cgf:Points comparing a value that is a Point that is the same as the search feature , the result document must  match the feature t0000.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Points">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:pointProperty</ogc:PropertyName>
<gml:Point xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500050,500050</gml:coordinates>
    </gml:Point>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Points/cgf:id[text() = 't0000']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is not the same as the search feature  , the result document must not  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500225,500325</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500275,500375</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiPointProperty on a cgf:MPoints comparing a value that is a MultiPoint that is  the same as the search feature , the result document must  match the feature t0003.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MPoints">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:multiPointProperty</ogc:PropertyName>
<gml:MultiPoint xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500325,500025</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
      <gml:pointMember>
        <gml:Point>
          <gml:coordinates>500375,500075</gml:coordinates>
        </gml:Point>
      </gml:pointMember>
    </gml:MultiPoint>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MPoints/cgf:id[text() = 't0003']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is not inside of the search feature , the result document must not  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500175,500125 500225,500475</gml:coordinates>
    </gml:LineString>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:lineStringProperty on a cgf:Lines comparing a value that is a LineString that is the portion of the search feature , the result document must  match the feature t0001.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Lines">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:lineStringProperty</ogc:PropertyName>
<gml:LineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:coordinates>500125,500025 500175,500075</gml:coordinates>
    </gml:LineString>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Lines/cgf:id[text() = 't0001']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is MultiLineString that is beyond the search  feature.  , the result document must not  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500225,500025 500275,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500225,500075 500275,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:multiLineStringProperty on a cgf:MLines comparing a value that is MultiLineString that is the portion of the search feature., the result document must  match the feature t0004.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:MLines">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:multiLineStringProperty</ogc:PropertyName>
<gml:MultiLineString xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500025 500475,500075</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
      <gml:lineStringMember>
        <gml:LineString>
          <gml:coordinates>500425,500075 500475,500025</gml:coordinates>
        </gml:LineString>
      </gml:lineStringMember>
    </gml:MultiLineString>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:MLines/cgf:id[text() = 't0004']) = true() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-filter-spatialoperators-within-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:GetFeature request with the Within spatial operator applied to a gml:polygonProperty on a cgf:Polygons comparing a value that is a Polygon that is outside of the search feature, the result document must not  match the feature t0002.</assertion>
      <comment><![CDATA[This test issues a wfs:GetFeature request using HTTP POST to the WFS server under test. The request will include a filter with the spatial operator Within with the specified feature and geometry value. The response document will be tested to check that the search feature is not  contained within the result feature collection.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:cgf="http://www.opengis.net/cite/geometry" outputFormat="GML2" version="1.0.0" service="WFS">
<wfs:Query typeName="cgf:Polygons">
<ogc:Filter>
<ogc:Within>
<ogc:PropertyName>gml:polygonProperty</ogc:PropertyName>
<gml:Polygon xmlns="http://www.opengis.net/cite/spatialTestSuite" srsName="EPSG:32615">
      <gml:outerBoundaryIs>
        <gml:LinearRing>
          <gml:coordinates>500225,500125 500225,500175 500275,500150 500275,500125 500225,500125</gml:coordinates>
        </gml:LinearRing>
      </gml:outerBoundaryIs>
    </gml:Polygon>
</ogc:Within>
</ogc:Filter>
</wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cgf:Polygons/cgf:id[text() = 't0002']) = false() and not(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that a GetFeature request with the output format GML2 returns a wfs:FeatureCollection with GML data.</assertion>
      <comment><![CDATA[The outputFormat attribute defines the format to use to generate the result set. The default value is GML2 indicating that GML [2] shall be used.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">GML2</param>
               <param name="typename">cdf:Other</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that getting the single feature of type cdf:Other returns all of the properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[The "PropertyName" element is used to enumerate the feature properties that should be selected during a query and whose values should be included in the response to a GetFeature request.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Other</param>
               <param name="propertyname">cdf:string1</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cdf:Other[
  cdf:string1
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that a GetFeature request with no output format defined returns a wfs:FeatureCollection with GML data.</assertion>
      <comment><![CDATA[The outputFormat attribute defines the format to use to generate the result set. The default value is GML2 indicating that GML [2] shall be used.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Other</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that a GetFeature request with an non supported output format defined returns a wfs:FeatureCollection with GML data.</assertion>
      <comment><![CDATA[The outputFormat attribute defines the format to use to generate the result set. The default value is GML2 indicating that GML [2] shall be used. Vendor specific formats (including non-XML and binary formats), declared in the capabilities document are also possible.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="outputformat">DUMMYFORMAT</param>
               <param name="typename">cdf:Other</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that getting the single feature of type cdf:Other returns the specified and all the mandatory properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[In the event that a WFS encounters a query that does not select all mandatory properties of a feature, the WFS will internally augment the property name list to include all necessary property names.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Other</param>
               <param name="propertyname">cdf:string2</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cdf:Other[
  cdf:string1 and
  cdf:string2
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that they query for the feature type cdf:Fifteen returns all 15 features in the database.</assertion>
      <comment><![CDATA[If no "Filter" element is contained within the "Query" element, then the query is unconstrained and all feature instances should be retrieved.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Fifteen</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 15)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 15))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that they query for the feature types cdf:Fifteen and cdf:Seven returns all 15 With an unsupported output format and 7 features in the database.</assertion>
      <comment><![CDATA[The "GetFeature" element contains one or more "Query"; elements, each of which in turn contain the description of a query. The results of all queries contained in a GetFeature request are concatenated to produce the result set.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Fifteen,cdf:Seven</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 22)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 15)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Seven) = 7))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that they query for the feature type cdf:Fifteen with a maxFeatures of 10 returns only 10 items.</assertion>
      <comment><![CDATA[The optional maxFeatures attribute can be used to limit the number of features that a GetFeature request retrieves. Once the maxFeatures limit is reached, the result set is truncated at that point.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Fifteen</param>
               <param name="maxfeatures">10</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 10)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 10))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that they query for the feature types cdf:Fifteen and cdf:Seven with a maxFeatures of 20 returns 15 and 5 features respectively.</assertion>
      <comment><![CDATA[The optional maxFeatures attribute can be used to limit the number of features that a GetFeature request retrieves. Once the maxFeatures limit is reached, the result set is truncated at that point.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Fifteen,cdf:Seven</param>
               <param name="maxfeatures">20</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 20)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 15)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Seven) = 5))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-get-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
      <assertion>Test that getting the single feature of type cdf:Other returns all of the properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[If no "PropertyName" elements are specified, then all feature properties should be fetched.Test that they query for the feature types cdf:Fifteen and cdf:Seven with a maxFeatures of 20 returns 15 and 5 features respectively.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetFeature</param>
               <param name="typename">cdf:Other</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cdf:Other[
  gml:description and
  gml:name and
  gml:boundedBy and
  gml:pointProperty and
  cdf:string1 and
  cdf:string2 and
  cdf:integers and
  cdf:dates
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that a GetFeature request with the output format GML2 returns a wfs:FeatureCollection with GML data.</assertion>
      <comment><![CDATA[The outputFormat attribute defines the format to use to generate the result set. The default value is GML2 indicating that GML [2] shall be used.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other" />
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that getting the single feature of type cdf:Other returns all of the properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[The "PropertyName" element is used to enumerate the feature properties that should be selected during a query and whose values should be included in the response to a GetFeature request.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
  xmlns:ogc="http://www.opengis.net/ogc"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:PropertyName>cdf:string1</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cdf:Other[
  cdf:string1
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that a GetFeature request with no output format defined returns a wfs:FeatureCollection with GML data.</assertion>
      <comment><![CDATA[The outputFormat attribute defines the format to use to generate the result set. The default value is GML2 indicating that GML [2] shall be used.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that a GetFeature request with no output format defined returns a wfs:FeatureCollection with GML data.</assertion>
      <comment><![CDATA[The outputFormat attribute defines the format to use to generate the result set. The default value is GML2 indicating that GML [2] shall be used. Vendor specific formats (including non-XML and binary formats), declared in the capabilities document are also possible.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="DUMMYFORMAT"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other" />
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that getting the single feature of type cdf:Other returns the specified and all the mandatory properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[In the event that a WFS encounters a query that does not select all mandatory properties of a feature, the WFS will internally augment the property name list to include all necessary property names.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other">
    <ogc:PropertyName>cdf:string2</ogc:PropertyName>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cdf:Other[
  cdf:string1 and
  cdf:string2
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that they query for the feature type cdf:Fifteen returns all 15 features in the database.</assertion>
      <comment><![CDATA[If no "Filter" element is contained within the "Query" element, then the query is unconstrained and all feature instances should be retrieved.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Fifteen" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 15)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 15))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that they query for the feature types cdf:Fifteen and cdf:Seven returns all 15 With an unsupported output format and 7 features in the database.</assertion>
      <comment><![CDATA[The "GetFeature" element contains one or more "Query"; elements, each of which in turn contain the description of a query. The results of all queries contained in a GetFeature request are concatenated to produce the result set.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Fifteen" />
  <wfs:Query typeName="cdf:Seven" />
</wfs:GetFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 22)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 15)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Seven) = 7))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that they query for the feature type cdf:Fifteen with a maxFeatures of 10 returns only 10 items.</assertion>
      <comment><![CDATA[The optional maxFeatures attribute can be used to limit the number of features that a GetFeature request retrieves. Once the maxFeatures limit is reached, the result set is truncated at that point.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  maxFeatures="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Fifteen" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 10)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 10))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that they query for the feature types cdf:Fifteen and cdf:Seven with a maxFeatures of 20 returns 15 and 5 features respectively.</assertion>
      <comment><![CDATA[The optional maxFeatures attribute can be used to limit the number of features that a GetFeature request retrieves. Once the maxFeatures limit is reached, the result set is truncated at that point.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  maxFeatures="20"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Fifteen" />
  <wfs:Query typeName="cdf:Seven" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(count(/wfs:FeatureCollection/gml:featureMember) = 20)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Fifteen) = 15)
and
boolean(count(/wfs:FeatureCollection/gml:featureMember/cdf:Seven) = 5))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-basic-getfeature-post-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>Test that getting the single feature of type cdf:Other returns all of the properties defined in the schema for that feature type.</assertion>
      <comment><![CDATA[If no "PropertyName" elements are specified, then all feature properties should be fetched.Test that they query for the feature types cdf:Fifteen and cdf:Seven with a maxFeatures of 20 returns 15 and 5 features respectively.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Other" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection/gml:featureMember/cdf:Other[
  gml:description and
  gml:name and
  gml:boundedBy and
  gml:pointProperty and
  cdf:string1 and
  cdf:string2 and
  cdf:integers and
  cdf:dates
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getcapabilities-get-1">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a locking WFS, the response document must contain capabilities entries for the requests LockFeature or GetFeatureWithLock for HTTP POST.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The response document will be tested to check that it defines the capabilities requests for LockFeature or GetFeatureWithLock for HTTP POST.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:LockFeature/wfs:DCPType/wfs:HTTP/wfs:Post)
or
boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock/wfs:DCPType/wfs:HTTP/wfs:Post))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getcapabilities-get-2">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a locking WFS, the result document must define the Lock operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Lock Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Lock)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations/wfs:Lock))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getcapabilities-post-1">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a locking WFS, the response document must contain capabilities entries for the requests LockFeature or GetFeatureWithLock for HTTP POST.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The response document will be tested to check that it defines the capabilities requests for LockFeature or GetFeatureWithLock for HTTP POST.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:LockFeature/wfs:DCPType/wfs:HTTP/wfs:Post)
or
boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:GetFeatureWithLock/wfs:DCPType/wfs:HTTP/wfs:Post))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getcapabilities-post-2">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a locking WFS, the result document must define the Lock operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Lock Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Lock)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations/wfs:Lock))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature without a lockId specified, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlbt0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlbt0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature using the lockId the feature was locked with, the result document be be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The optional  "LockId" element is used to specify that the transaction will be applied to previously locked set of feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlbt0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlbt0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature using a lockId that the feature was not locked with, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlbt0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId>INVALID LOCK ID</wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlbt0003</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature without a lockId specified, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlbt0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature using the lockId the feature was locked with, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The optional "LockId" element is used to specify that the transaction will be applied to previously locked set of feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlbt0005&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-basictransactions-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature using a lockId that the feature was not locked with, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlbt0006&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId>INVALID LOCK ID</wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature within the expiry counter, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwle0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="1"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwle0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature after the expiry country has expired, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes. Once the specified number of minutes have elapsed, a web feature service may release the lock if it exists. Any further transactions issued against that lock using a lock identifier generated by the service will fail.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwle0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="1"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <message>Pausing for 120 seconds...</message>
         <xsl:value-of select="wfs:sleep(60500)"/>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwle0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature within the expiry counter, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwle0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="3"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-lockexpiry-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature after the expiry country has expired, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes. Once the specified number of minutes have elapsed, a web feature service may release the lock if it exists. Any further transactions issued against that lock using a lock identifier generated by the service will fail.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwle0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="1"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <message>Pausing for 120 seconds...</message>
         <xsl:value-of select="wfs:sleep(60500)"/>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0005&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0006&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was not released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:FAILED.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0007&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0008&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0007</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0008</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2"/>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0009&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0010&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was not released (with the releaseAction ALL) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0003</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0004</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0005&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0006&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was not released (with the releaseAction ALL) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0007&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0008&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0007</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0008</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified :LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0009&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlra0010&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlra0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-getfeaturewithlock-releaseaction-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was not released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;gfwlrs0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_WITH_LOCK_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeatureWithLock
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:FeatureCollection/@lockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0003</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>gfwlrs0004</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-basictransactions-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature without a lockId specified, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfbt0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfbt0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-basictransactions-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature using the lockId the feature was locked with, the result document be be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The optional  "LockId" element is used to specify that the transaction will be applied to previously locked set of feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfbt0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfbt0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-basictransactions-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature using a lockId that the feature was not locked with, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfbt0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId>INVALID LOCK ID</wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfbt0003</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-basictransactions-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature without a lockId specified, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfbt0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-basictransactions-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature using the lockId the feature was locked with, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The optional "LockId" element is used to specify that the transaction will be applied to previously locked set of feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfbt0005&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-basictransactions-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature using a lockId that the feature was not locked with, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[N/A]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfbt0006&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId>INVALID LOCK ID</wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockaction-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:LockFeature request is made for a feature that has not been locked, the result document must contain the wfs:LockId and no FeaturesNotLocked.</assertion>
      <comment><![CDATA[In response to a LockFeature request, a web feature service shall generate an XML document. This document will contain a lock identifier that a client application can use in subsequent WFS operations to operate upon the set of locked feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfla0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_LockFeatureResponse/wfs:LockId)
and
count(/wfs:WFS_LockFeatureResponse/wfs:FeaturesNotLocked/ogc:FeatureId) = 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockaction-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:LockFeature request is made for a feature that has already been locked using the lockAction ALL, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[The optional lockAction attribute is used to control how feature locks are acquired. A lock action of ALL indicates that a web feature service should try to acquire a lock on all requested feature instances. If all feature instances cannot be locked, then the operation should fail, and no feature instances should remain locked.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfla0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  lockAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockaction-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:LockFeature request is made for a feature that has already been locked using the lockAction SOME, the result document must contain one wfs:FeaturesNotLocked.</assertion>
      <comment><![CDATA[If the lock action is set to SOME, then a web feature service shall attempt to lock as many of the requested feature instances as it can.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfla0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  lockAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(count(/wfs:WFS_LockFeatureResponse/wfs:FeaturesNotLocked/ogc:FeatureId) &gt; 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockaction-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:LockFeature request is made for a feature that has already been locked using the default lockAction (ALL), the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[The default lock action shall be ALL. Section 10.2.2 presents a state machine for the LockFeature operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfla0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature within the expiry counter, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfe0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="1"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfe0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a locked feature after the expiry country has expired, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes. Once the specified number of minutes have elapsed, a web feature service may release the lock if it exists. Any further transactions issued against that lock using a lock identifier generated by the service will fail.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfe0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="1"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <message>Pausing for 120 seconds...</message>
         <xsl:value-of select="wfs:sleep(60500)"/>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfe0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature within the expiry counter, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfe0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="3"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-lockexpiry-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Delete a locked feature after the expiry country has expired, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[The expiry attribute is used to set a limit on how long a web feature service should hold a lock on feature instances in the event that a transaction is never issued that will release the lock. The expiry limit is specified in minutes. Once the specified number of minutes have elapsed, a web feature service may release the lock if it exists. Any further transactions issued against that lock using a lock identifier generated by the service will fail.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfe0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="1"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>

</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <message>Pausing for 120 seconds...</message>
         <xsl:value-of select="wfs:sleep(60500)"/>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body>
<wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Delete typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-10">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0005&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0006&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-11">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was not released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:FAILED.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0007&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0008&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0007</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0008</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2"/>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-12">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0009&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0010&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was not released (with the releaseAction ALL) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0003</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0004</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-4">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0005&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0006&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0005</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-5">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was not released (with the releaseAction ALL) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified "LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0007&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0008&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0007</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0008</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-6">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction ALL) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[Assuming that a WFS implementation supports the optional LockFeature and/or GetFeatureWithLock operations, the releaseAction attribute is used to control how locked features are treated when a transaction request is completed. A value of ALL indicates that the locks on all feature instances locked using the specified :LockId" should be released when the transaction completes, regardless of whether or not a particular feature instance in the locked set was actually operated upon.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0009&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfra0010&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="ALL"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfra0009</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-7">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature without a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0001</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-8">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was released (with the releaseAction SOME) by a previous request, the result document must be an ogc:ServiceExceptionReport or a failed transaction response.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0002</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/ogc:ServiceExceptionReport) or boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:FAILED))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-lock-lockfeature-releaseaction-9">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to Update a feature with a lockId, that was not released (with the releaseAction SOME) by a previous request, the result document must be a wfs:WFS_TransactionResponse with a wfs:Status of wfs:SUCCESS.</assertion>
      <comment><![CDATA[A value of SOME indicates that only the locks on feature instances modified by the transaction should be released. The other, unmodified, feature instances should remain locked using the same "LockId" so that subsequent transactions can operate on those feature instances.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Locks" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Locks[cdf:id = &#34;lfrs0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_LOCK_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:LockFeature
  service="WFS"
  version="1.0.0"
  expiry="10"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Lock typeName="cdf:Locks">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_lockId">
            <xsl:for-each select="$request2">
               <xsl:value-of select="string(/wfs:WFS_LockFeatureResponse/wfs:LockId)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_lockId: <xsl:value-of select="$VAR_lockId"/>
         </message>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  releaseAction="SOME"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0003</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request4">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:LockId><xsl:value-of select="$VAR_lockId"/></wfs:LockId>
  <wfs:Update typeName="cdf:Locks">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>lfrs0004</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request4">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-get-1">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the response document must contain capabilities entries for the requests Transaction for HTTP POST.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The response document will be tested to check that it defines the capabilities requests for Transaction for HTTP POST.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:Transaction/wfs:DCPType/wfs:HTTP/wfs:Post))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-get-2">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the result document must define the Insert operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Insert Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Insert)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations//wfs:Insert))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-get-3">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the result document must define the Update operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Update Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Update)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations//wfs:Update))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-get-4">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the result document must define the Delete operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Delete Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#KVP.GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </url>
               <method>get</method>
               <param name="service">WFS</param>
               <param name="version">1.0.0</param>
               <param name="request">GetCapabilities</param>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Delete)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations//wfs:Delete))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-post-1">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the response document must contain capabilities entries for the requests Transaction for HTTP POST.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test. The response document will be tested to check that it defines the capabilities requests for Transaction for HTTP POST.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:Capability/wfs:Request/wfs:Transaction/wfs:DCPType/wfs:HTTP/wfs:Post))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-post-2">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the result document must define the Insert operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Insert Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Insert)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations//wfs:Insert))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-post-3">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the result document must define the Update operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Update Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Update)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations//wfs:Update))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-getcapabilities-post-4">
      <param name="VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <assertion>When a wfs:GetCapabilities request is made to a transactional WFS, the result document must define the Delete operation either globally or for at least one feature type.</assertion>
      <comment><![CDATA[This test issues a GetCapabilities request using HTTP GET to the WFS server under test.The response document will be tested to check that the global FeatureTypeList or at least one FeatureType defines the Delete Operation.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#GetCapabilities</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetCapabilities
  service="WFS"
  version="1.0.0"
  xmlns:wfs="http://www.opengis.net/wfs"
/>
</body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:Operations/wfs:Delete)
or
boolean(/wfs:WFS_Capabilities/wfs:FeatureTypeList/wfs:FeatureType/wfs:Operations//wfs:Delete))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-delete-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to delete a single feature that is in the database, the result document must must a successful transaction response and a subsequent request to get the feature must return no features.</assertion>
      <comment><![CDATA[This test issues a wfs:Transaction request using HTTP POST to the WFS server under test. The request includes a Delete request to delete the cdf:Deletes with the cdf:id = td0001. The response will be checked to ensure it has a wfs:WFS_TransactionResponse/wfs:Status/wfs:SUCCESS. A wfs:GetFeature request using HTTP POST is sent to the server to request the features with the same filter, the response document will be checked to ensure no features are returned.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#Transaction.Delete</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Deletes" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Deletes[cdf:id = &#34;td0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Delete typeName="cdf:Deletes">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Deletes">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection) and count(//cdf:Deletes) = 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-delete-2">
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to delete a single feature that is not in the database, the result document must must a successful transaction response and a subsequent request to get the feature must return no features.</assertion>
      <comment><![CDATA[This test issues a wfs:Transaction request using HTTP POST to the WFS server under test. The request includes a Delete request to delete the cdf:Deletes with the cdf:id = NONEXISTINGFEATUREID. The response will be checked to ensure it has a wfs:WFS_TransactionResponse/wfs:Status/wfs:SUCCESS. A wfs:GetFeature request using HTTP POST is sent to the server to request the features with the same filter, the response document will be checked to ensure no features are returned.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#Transaction.Delete</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Delete typeName="cdf:Deletes">
    <ogc:Filter>
      <ogc:FeatureId fid="NONEXISTINGFEATUREID"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Deletes">
    <ogc:Filter>
      <ogc:FeatureId fid="NONEXISTINGFEATUREID"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection) and count(//cdf:Deletes) = 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-delete-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to delete a single feature that is in the database, the result document must must a successful transaction response and a subsequent request to get the feature must return no features.</assertion>
      <comment><![CDATA[This test issues a wfs:Transaction request using HTTP POST to the WFS server under test. The request includes a Delete request to delete the cdf:Deletes with the cdf:id = td0002 & td0003. The response will be checked to ensure it has a wfs:WFS_TransactionResponse/wfs:Status/wfs:SUCCESS. A wfs:GetFeature request using HTTP POST is sent to the server to request the features with the same filter, the response document will be checked to ensure no features are returned.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#Transaction.Delete</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Deletes" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Deletes[cdf:id = &#34;td0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Deletes[cdf:id = &#34;td0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Delete typeName="cdf:Deletes">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Delete>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Deletes">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection) and count(//cdf:Deletes) = 0)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-insert-1">
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that a single feature within an Insert operation is added to the database successfully and the feature can be retrieved from the server.</assertion>
      <comment><![CDATA[The <Insert> element is used to create new feature instances. The initial state of a feature to be created is expressed using GML and must validate relative to a GML application schema generated by the DescribeFeatureType operation [sec. 8]. Multiple <Insert> elements can be enclosed in a single Transaction request and multiple feature instances can be created using a single <Insert> element]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:gml="http://www.opengis.net/gml"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Insert>
    <cdf:Inserts>
      <gml:boundedBy>
        <gml:Box srsName="EPSG:32615">
          <gml:coordinates>500000,500000 500100,500100</gml:coordinates>
        </gml:Box>
      </gml:boundedBy>
      <cdf:id>ti0000</cdf:id>
      <gml:pointProperty>
        <gml:Point srsName="EPSG:32615">
          <gml:coordinates>500050,500050</gml:coordinates>
        </gml:Point>
      </gml:pointProperty>
    </cdf:Inserts>
  </wfs:Insert>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:WFS_TransactionResponse/wfs:InsertResult/ogc:FeatureId[1]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Inserts">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:WFS_TransactionResponse/wfs:InsertResult/ogc:FeatureId) = 1
and
boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:FeatureCollection) and count(//cdf:Inserts) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-insert-2">
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that a single feature within an Insert operation with a handle is added to the database successfully with the handle returned and the feature can be retrieved from the server.</assertion>
      <comment><![CDATA[The <Insert> element is used to create new feature instances. The initial state of a feature to be created is expressed using GML and must validate relative to a GML application schema generated by the DescribeFeatureType operation [sec. 8]. Multiple<Insert> elements can be enclosed in a single Transaction request and multiple feature instances can be created using a single <Insert> element.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:gml="http://www.opengis.net/gml"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Insert handle="Test Handle">
    <cdf:Inserts>
      <gml:boundedBy>
        <gml:Box srsName="EPSG:32615">
          <gml:coordinates>500000,500000 500100,500100</gml:coordinates>
        </gml:Box>
      </gml:boundedBy>
      <cdf:id>ti0001</cdf:id>
      <gml:pointProperty>
        <gml:Point srsName="EPSG:32615">
          <gml:coordinates>500050,500050</gml:coordinates>
        </gml:Point>
      </gml:pointProperty>
    </cdf:Inserts>
  </wfs:Insert>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:WFS_TransactionResponse/wfs:InsertResult/ogc:FeatureId[1]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Inserts">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:WFS_TransactionResponse/wfs:InsertResult[@handle = 'Test Handle']/ogc:FeatureId) = 1
and
boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(count(//cdf:Inserts) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-insert-3">
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <assertion>This test checks that a single feature within an Insert operation is added to the database successfully and the feature can be retrieved from the server.</assertion>
      <comment><![CDATA[The <Insert> element is used to create new feature instances. The initial state of a feature to be created is expressed using GML and must validate relative to a GML application schema generated by the DescribeFeatureType operation [sec. 8]. Multiple <Insert> elements can be enclosed in a single Transaction request and multiple feature instances can be created using a single <Insert> element]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:gml="http://www.opengis.net/gml"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Insert>
    <cdf:Inserts>
      <gml:boundedBy>
        <gml:Box srsName="EPSG:32615">
          <gml:coordinates>500000,500000 500100,500100</gml:coordinates>
        </gml:Box>
      </gml:boundedBy>
      <cdf:id>ti0002</cdf:id>
      <gml:pointProperty>
        <gml:Point srsName="EPSG:32615">
          <gml:coordinates>500050,500050</gml:coordinates>
        </gml:Point>
      </gml:pointProperty>
    </cdf:Inserts>
    <cdf:Inserts>
      <gml:boundedBy>
        <gml:Box srsName="EPSG:32615">
          <gml:coordinates>500000,500000 500100,500100</gml:coordinates>
        </gml:Box>
      </gml:boundedBy>
      <cdf:id>ti0003</cdf:id>
      <gml:pointProperty>
        <gml:Point srsName="EPSG:32615">
          <gml:coordinates>500050,500050</gml:coordinates>
        </gml:Point>
      </gml:pointProperty>
    </cdf:Inserts>
  </wfs:Insert>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:WFS_TransactionResponse/wfs:InsertResult/ogc:FeatureId[1]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:WFS_TransactionResponse/wfs:InsertResult/ogc:FeatureId[2]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Inserts">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:variable name="expression">not(count(/wfs:WFS_TransactionResponse/wfs:InsertResult/ogc:FeatureId) = 2
and
boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(count(//cdf:Inserts) = 2)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-update-1">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to update a single feature that is in the database, the result document must must a successful transaction response and a subsequent request to get the feature must return the change to the feature.</assertion>
      <comment><![CDATA[This test issues a wfs:Transaction request using HTTP POST to the WFS server under test. The request includes a Update request to update the cdf:Updates with the cdf:id = tu0001. The response will be checked to ensure it has a wfs:WFS_TransactionResponse/wfs:Status/wfs:SUCCESS. A wfs:GetFeature request using HTTP POST is sent to the server to request the features with the same filter, the response document will be checked to ensure the feature is returned with the correct value.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#Transaction.Update</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Updates" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Updates[cdf:id = &#34;tu0001&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Updates">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>changed</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Updates">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(count(//cdf:Updates/cdf:id[text() = 'changed']) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-update-2">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to update a two features that are in the database, the result document must must a successful transaction response and a subsequent request to get the features must return the changes to the feature.</assertion>
      <comment><![CDATA[This test issues a wfs:Transaction request using HTTP POST to the WFS server under test. The request includes a Update request to update the cdf:Updates with the cdf:id = tu0002 & tu0003. The response will be checked to ensure it has a wfs:WFS_TransactionResponse/wfs:Status/wfs:SUCCESS. A wfs:GetFeature request using HTTP POST is sent to the server to request the features with the same filter, the response document will be checked to ensure the feature is returned with the correct value.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#Transaction.Update</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Updates" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Updates[cdf:id = &#34;tu0002&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId1: <xsl:value-of select="$VAR_featureId1"/>
         </message>
         <xsl:variable name="VAR_featureId2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Updates[cdf:id = &#34;tu0003&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId2: <xsl:value-of select="$VAR_featureId2"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Updates">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>changed</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Updates">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId1}"/>
      <ogc:FeatureId fid="{$VAR_featureId2}"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(count(//cdf:Updates/cdf:id[text() = 'changed']) = 2)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
   <test name="wfs:test1.0.0-transactional-transaction-update-3">
      <param name="VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
      <param name="VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
      <assertion>When a wfs:Transaction request is made to update a multiple features where one is in the database, the result document must must a successful transaction response and a subsequent request to get the feature must return the change to the single feature.</assertion>
      <comment><![CDATA[This test issues a wfs:Transaction request using HTTP POST to the WFS server under test. The request includes a Update request to update the cdf:Updates with the cdf:id = tu0004 & DUMMYFEATUREID. The response will be checked to ensure it has a wfs:WFS_TransactionResponse/wfs:Status/wfs:SUCCESS. A wfs:GetFeature request using HTTP POST is sent to the server to request the features with the same filter, the response document will be checked to ensure the feature is returned with the correct value.]]></comment>
      <ctl:link title="OGC 02-058">http://cite.opengeospatial.org/OGCTestData/wfs/1.0.0/specs/wfs/1.0.0/02-058.html#Transaction.Update</ctl:link>
      <code>
         <xsl:variable name="request1">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Updates" />
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="VAR_featureId">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(wfs:FeatureCollection/gml:featureMember/cdf:Updates[cdf:id = &#34;tu0004&#34;]/@fid)"/>
            </xsl:for-each>
         </xsl:variable>
         <message>VAR_featureId: <xsl:value-of select="$VAR_featureId"/>
         </message>
         <xsl:variable name="request2">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_TRANSACTION_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:Transaction
  service="WFS"
  version="1.0.0"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Update typeName="cdf:Updates">
    <wfs:Property>
      <wfs:Name>cdf:id</wfs:Name>
      <wfs:Value>changed</wfs:Value>
    </wfs:Property>
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
      <ogc:FeatureId fid="DUMMYFEATUREID"/>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:variable name="request3">
            <request>
               <url>
                  <xsl:value-of select="$VAR_WFS_GET_FEATURE_HTTP_POST_URL"/>
               </url>
               <method>post</method>
               <body><wfs:GetFeature
  service="WFS"
  version="1.0.0"
  outputFormat="GML2"
  xmlns:cdf="http://www.opengis.net/cite/data"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:wfs="http://www.opengis.net/wfs"
>
  <wfs:Query typeName="cdf:Updates">
    <ogc:Filter>
      <ogc:FeatureId fid="{$VAR_featureId}"/>
      <ogc:FeatureId fid="DUMMYFEATUREID"/>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature></body>
               <wfs:GMLValidatingParser/>
            </request>
         </xsl:variable>
         <xsl:for-each select="$request1">
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request2">
            <xsl:variable name="expression">not(boolean(/wfs:WFS_TransactionResponse/wfs:TransactionResult/wfs:Status/wfs:SUCCESS))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:for-each select="$request3">
            <xsl:variable name="expression">not(count(//cdf:Updates/cdf:id[text() = 'changed']) = 1)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <fail/>
            </xsl:if>
         </xsl:for-each>
      </code>
   </test>
</package>
