<?xml version="1.0" encoding="utf-8"?>
<ctl:package
 xmlns:wms-1.3.0="https://cite.opengeospatial.org/wms-1.3.0/src/ctl"
 xmlns:main="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/main.xml"
 xmlns:functions="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/functions.xml"
 xmlns:basic_elements="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/basic_elements.xml"
 xmlns:getcapabilities="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/getcapabilities.xml"
 xmlns:getmap="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/getmap.xml"
 xmlns:getfeatureinfo="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/getfeatureinfo.xml"
 xmlns:recommendations="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/recomendations.xml"
 xmlns:dims="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/dimensions.xml"
 xmlns:interactive="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/interactive.xml"
 xmlns:ccf="http://www.opengis.net/cite/complex"
 xmlns:cdf="http://www.opengis.net/cite/data"
 xmlns:cgf="http://www.opengis.net/cite/geometry"
 xmlns:citef="http://www.opengis.net/cite/functions"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wms="http://www.opengis.net/wms"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>

   <ctl:suite name="wms-1.3.0:compliance_suite">
      <ctl:title>Web Map Service (WMS) 1.3.0</ctl:title>
      <ctl:description>Validates that a WMS 1.3.0 is compliant.</ctl:description>
      <ctl:link>docs/wms/1.3.0/</ctl:link>
      <ctl:link>data/data-wms-1.3.0.zip</ctl:link>
      <ctl:starting-test>main:main</ctl:starting-test>
<!--      <ctl:form xmlns="">
            <h3>Web Map Service 1.3.0</h3>
            <br/>
            <h4>Capabilities Setup</h4>
            <p>
               Enter a capabilities document URL below. main may be the URL to
               a static capabilities document, or a GetCapabilities request from a
               WMS. A typical GetCapabilities request will take main form:
            </p>
            <pre>http://hostname/path?SERVICE=WMS&amp;REQUEST=GetCapabilities&amp;VERSION=1.3.0</pre>
            <br/>
            <blockquote>
               <table border="3" padding="3">
                  <tr>
                     <td align="center">
                        <input name="capabilities-url" size="100" type="text" value=""/>
                     </td>
                     <td align="left">Capabilities URL</td>
                  </tr>
               </table>
            </blockquote>
            <br/>
            <h4>UpdateSequence Values</h4>
            <p>
               The WMS spec allows servers to use an UpdateSequence value for
               maintaining cache consistency as described in
               <a href="http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getcapabilities.params.updatesequence">Section 7.2.3.5 of the specification</a>.
               If the server advertises an UpdateSequence value and the
               Automatic option is selected below, the test suite will attempt to
               test the UpdateSequence behavior automatically. However, the
               lexical ordering of UpdateSequence values is determined by the
               server, so the tests may not always be correct. If you suspect a
               problem, select the Manual option and enter the updateSequence
               values requested below.
            </p>
            <blockquote>
               <table border="3" padding="3">
                  <tr>
                     <td align="center">
                        <input checked="checked" name="updatesequence" type="radio" value="auto"/>
                     </td>
                     <td align="left">Automatic - The updateSequence tests will use automatically generated updateSequence values</td>
                  </tr>
                  <tr>
                     <td align="center">
                        <input name="updatesequence" type="radio" value="manual"/>
                     </td>
                     <td align="left">Manual - The updateSequence tests will use the values supplied below</td>
                  </tr>
               </table>
            </blockquote>
            <p>(Fill in these boxes if the Manual option is selected above)</p>
            <blockquote>
               <table border="3" padding="3">
                  <tr>
                     <td align="center">
                        <input name="high-updatesequence" size="25" type="text" value=""/>
                     </td>
                     <td align="left">A value that is lexically higher than the current updateSequence value</td>
                  </tr>
                  <tr>
                     <td align="center">
                        <input name="low-updatesequence" size="25" type="text" value=""/>
                     </td>
                     <td align="left">A value that is lexically lower than the current updateSequence value</td>
                  </tr>
               </table>
            </blockquote>
            <br/>
            <h4>Options</h4>
            <blockquote>
               <table border="3" padding="3">
                  <tr>
                     <td align="center">
                        <input name="basic" type="checkbox" value="basic" checked="checked"/>
                     </td>
                     <td align="left">BASIC - Test basic functionality that depends on the CITE dataset.  This option is required for certification.</td>
                  </tr>
                  <tr>
                     <td align="center">
                        <input name="queryable" type="checkbox" value="queryable" checked="checked"/>
                     </td>
                     <td align="left">QUERYABLE - Test GetFeatureInfo functionality that depends on the CITE dataset.</td>
                  </tr>
                  <tr>
                     <td align="center">
                        <input name="raster_elevation" type="checkbox" value="raster_elevation"/>
                     </td>
                     <td align="left">RASTER ELEVATION - Test the elevation dimension using the cite:Terrain raster dataset.</td>
                  </tr>
                  <tr>
                     <td align="center">
                        <input name="vector_elevation" type="checkbox" value="vector_elevation"/>
                     </td>
                     <td align="left">VECTOR ELEVATION - Test the elevation dimension using the cite:Lakes vector dataset.</td>
                  </tr>
                  <tr>
                     <td align="center">
                        <input name="time" type="checkbox" value="time"/>
                     </td>
                     <td align="left">TIME - Test the time dimension using the cite:Autos dataset.</td>
                  </tr>
                  <tr>
                     <td align="center">
                        <input name="recommended" type="checkbox" value="recommended"/>
                     </td>
                     <td align="left">RECOMENDATIONS - Test functionality which is recommended in the specification.</td>
                  </tr>
               </table>
            </blockquote>
            <br/>
            <input type="submit" value="OK"/>
      </ctl:form>-->
   </ctl:suite>

   <ctl:test name="main:main">
      <ctl:param name="capabilities-url"/>
      <ctl:assertion>The implementation under test complies with the WMS 1.3.0 specification.</ctl:assertion>
      <ctl:code>
        <xsl:variable name="basic" />
        <xsl:variable name="queryable">queryable</xsl:variable>
        <xsl:variable name="raster_elevation">raster_elevation</xsl:variable>
        <xsl:variable name="vector_elevation">vector_elevation</xsl:variable>
        <xsl:variable name="time">time</xsl:variable>
        <xsl:variable name="recommended"/>

         <xsl:variable name="capabilities">
            <ctl:request>
               <ctl:url><xsl:value-of select="$capabilities-url"/></ctl:url>
               <ctl:method>get</ctl:method>
            </ctl:request>
         </xsl:variable>

         <xsl:variable name="high-updatesequence">
           <xsl:value-of select="functions:increment-updatesequence($capabilities/wms:WMS_Capabilities/@updateSequence, 1)"/>
         </xsl:variable>

         <xsl:variable name="low-updatesequence">
           <xsl:value-of select="functions:increment-updatesequence($capabilities/wms:WMS_Capabilities/@updateSequence, -1)"/>
         </xsl:variable>

         <xsl:if test="not($capabilities/wms:WMS_Capabilities)">
            <ctl:message>Error: The capabilities document does not contain a root element named WMS_Capabilities in the &quot;http://www.opengis.net/wms&quot; namespace.</ctl:message>
            <ctl:message>Further processing suspended.</ctl:message>
            <ctl:fail/>
         </xsl:if>

         <ctl:for-each select="$capabilities/wms:WMS_Capabilities">

            <xsl:variable name="exhaustive">exhaustive</xsl:variable>

<!--            <ctl:call-test name="interactive:main">
               <ctl:with-param name="basic" select="$basic"/>
            </ctl:call-test>-->

            <ctl:call-test name="main:options-requirements">
               <ctl:with-param name="basic" select="$basic"/>
               <ctl:with-param name="queryable" select="$queryable"/>
               <ctl:with-param name="raster_elevation" select="$raster_elevation"/>
               <ctl:with-param name="vector_elevation" select="$vector_elevation"/>
               <ctl:with-param name="time" select="$time"/>
            </ctl:call-test>

            <ctl:call-test name="basic_elements:main"/>

            <ctl:call-test name="getcapabilities:main">
               <ctl:with-param name="high-updatesequence" select="$high-updatesequence"/>
               <ctl:with-param name="low-updatesequence" select="$low-updatesequence"/>
            </ctl:call-test>

            <ctl:call-test name="getmap:main">
               <ctl:with-param name="basic" select="$basic"/>
               <ctl:with-param name="exhaustive" select="$exhaustive"/>
            </ctl:call-test>

            <ctl:call-test name="getfeatureinfo:main">
               <ctl:with-param name="queryable" select="$queryable"/>
            </ctl:call-test>

            <xsl:if test="$recommended = 'recommended'">
               <ctl:call-test name="recommendations:main"/>
            </xsl:if>

            <ctl:call-test name="dims:main">
               <ctl:with-param name="raster_elevation" select="$raster_elevation"/>
               <ctl:with-param name="vector_elevation" select="$vector_elevation"/>
               <ctl:with-param name="time" select="$time"/>
            </ctl:call-test>
         </ctl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:options-requirements">
      <ctl:param name="basic" />
      <ctl:param name="queryable"/>
      <ctl:param name="raster_elevation"/>
      <ctl:param name="vector_elevation"/>
      <ctl:param name="time"/>
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The requirements for testing the selected options are met.</ctl:assertion>
      <ctl:code>
         <xsl:if test="$basic='basic'">
            <ctl:call-test name="main:gif-or-png"/>
         </xsl:if>

         <xsl:if test="$basic='basic' or $queryable='queryable'">
            <ctl:call-test name="main:std-data-present">
               <ctl:with-param name="raster_elevation" select="$raster_elevation"/>
               <ctl:with-param name="time" select="$time"/>
            </ctl:call-test>
         </xsl:if>

         <xsl:if test="$queryable='queryable'">
            <ctl:call-test name="main:getfeatureinfo-supported"/>
            <ctl:call-test name="main:std-data-queryable"/>
         </xsl:if>

         <xsl:if test="$raster_elevation='raster_elevation'">
            <ctl:call-test name="main:raster_elevation"/>
         </xsl:if>

         <xsl:if test="$vector_elevation='vector_elevation'">
            <ctl:call-test name="main:vector_elevation"/>
         </xsl:if>

         <xsl:if test="$time='time'">
            <ctl:call-test name="main:time"/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:std-data-present">
      <ctl:param name="raster_elevation"/>
      <ctl:param name="time"/>
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server implements the CITE standard dataset in subsettable, resizable layers that support CRS:84.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="root-layer" select="wms:Capability/wms:Layer"/>
         <xsl:variable name="titles">
            <title>cite:BasicPolygons</title>
            <title>cite:Bridges</title>
            <title>cite:Buildings</title>
            <title>cite:DividedRoutes</title>
            <title>cite:Forests</title>
            <title>cite:Lakes</title>
            <title>cite:MapNeatline</title>
            <title>cite:NamedPlaces</title>
            <title>cite:Ponds</title>
            <title>cite:RoadSegments</title>
            <title>cite:Streams</title>
            <xsl:if test="$raster_elevation='raster_elevation'">
               <title>cite:Terrain</title>
            </xsl:if>
            <xsl:if test="$time='time'">
               <title>cite:Autos</title>
            </xsl:if>
         </xsl:variable>
         <xsl:for-each select="$titles/title">
            <xsl:variable name="title" select="."/>
            <xsl:variable name="layer" select="$root-layer/descendant-or-self::wms:Layer[wms:Title = $title]"/>
            <xsl:choose>
               <xsl:when test="not($layer/wms:Title)">
                  <ctl:message>Error: No layer titled <xsl:value-of select="$title"/> found.</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:if test="not($layer/ancestor-or-self::wms:Layer[wms:CRS = 'CRS:84'])">
                     <ctl:message>Error: Layer titled <xsl:value-of select="$title"/> must support CRS:84.</ctl:message>
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="functions:boolean-as-integer($layer/@noSubsets) = 1">
                     <ctl:message>Error: Layer titled <xsl:value-of select="$title"/> must allow subsets.</ctl:message>
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="functions:boolean-as-integer($layer/@fixedWidth) != 0">
                     <ctl:message>Error: Layer titled <xsl:value-of select="$title"/> must not have a fixed size.</ctl:message>
                     <ctl:fail/>
                  </xsl:if>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:gif-or-png">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports GetMap format image/gif and/or image/png.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:for-each select="wms:Capability/wms:Request/wms:GetMap">
            <xsl:if test="not(wms:Format[. = 'image/gif' or . = 'image/png'])">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:getfeatureinfo-supported">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>GetFeatureInfo requests are supported.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:if test="not(wms:Capability/wms:Request/wms:GetFeatureInfo)">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:std-data-queryable">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The CITE standard dataset layers containing polygons are queryable.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="root-layer" select="wms:Capability/wms:Layer"/>
         <xsl:variable name="titles">
            <title>cite:BasicPolygons</title>
            <title>cite:Forests</title>
            <title>cite:Lakes</title>
            <title>cite:NamedPlaces</title>
         </xsl:variable>
         <xsl:for-each select="$titles/title">
            <xsl:variable name="title" select="."/>
            <xsl:variable name="layer" select="$root-layer/descendant-or-self::wms:Layer[wms:Title = $title]"/>
            <xsl:choose>
               <xsl:when test="not($layer/wms:Title)">
                  <ctl:message>Error: No layer titled <xsl:value-of select="$title"/> found.</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:if test="functions:boolean-as-integer($layer/@queryable) = 0">
                     <ctl:message>Error: Layer titled <xsl:value-of select="$title"/> must be queryable.</ctl:message>
                     <ctl:fail/>
                  </xsl:if>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:raster_elevation">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports the cite:Terrain layer with a properly declared elevation dimenson.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="layer" select="wms:Capability/wms:Layer/descendant-or-self::wms:Layer[wms:Title = 'cite:Terrain']"/>
         <xsl:variable name="dim" select="$layer/ancestor-or-self::wms:Layer/wms:Dimension[@name='elevation'][1]"/>
         <xsl:variable name="extent" select="concat(',', string($dim), ',')"/>
         <xsl:choose>
            <xsl:when test="not($layer/*)">
               <ctl:message>Error: No layer titled cite:Terrain found.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:when test="not($dim/self::wms:Dimension)">
               <ctl:message>Error: The cite:Terrain layer does not have an elevation dimension.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$dim/@units != 'CRS:88'">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with units=&quot;CRS:88&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="$dim/@unitSymbol != 'm'">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with unitSymbol=&quot;m&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@multipleValues) != 1">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with multipleValues=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@nearestValue) != 0">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with nearestValue=&quot;false&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="not(contains($extent, ',0/425/1,'))">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined using extent value &quot;0/425/1&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:vector_elevation">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports the cite:Lakes layer with a properly declared elevation dimenson.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="layer" select="wms:Capability/wms:Layer/descendant-or-self::wms:Layer[wms:Title = 'cite:Lakes']"/>
         <xsl:variable name="dim" select="$layer/ancestor-or-self::wms:Layer/wms:Dimension[@name='elevation'][1]"/>
         <xsl:variable name="extent" select="concat(',', string($dim), ',')"/>
         <xsl:choose>
            <xsl:when test="not($layer/*)">
               <ctl:message>Error: No layer titled cite:Lakes found.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:when test="not($dim/self::wms:Dimension)">
               <ctl:message>Error: The cite:Lakes layer does not have an elevation dimension.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$dim/@units != 'CRS:88'">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with units=&quot;CRS:88&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="$dim/@unitSymbol != 'm'">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with unitSymbol=&quot;m&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@multipleValues) != 0">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with multipleValues=&quot;false&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@nearestValue) != 1">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with nearestValue=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="$dim/@default != '500'">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with default=&quot;500&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="not(contains($extent, ',500,') and contains($extent, ',490,') and contains($extent, ',480,'))">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined using extent value &quot;500,490,480&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="main:time">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports the cite:Autos layer with a properly declared time dimenson.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="layer" select="wms:Capability/wms:Layer/descendant-or-self::wms:Layer[wms:Title = 'cite:Autos']"/>
         <xsl:variable name="dim" select="$layer/ancestor-or-self::wms:Layer/wms:Dimension[@name='time'][1]"/>
         <xsl:variable name="extent" select="concat(',', string($dim), ',')"/>
         <xsl:choose>
            <xsl:when test="not($layer/*)">
               <ctl:message>Error: No layer titled cite:Autos found.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:when test="not($dim/self::wms:Dimension)">
               <ctl:message>Error: The cite:Autos layer does not have an time dimension.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$dim/@units != 'ISO8601'">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined with units=&quot;ISO8601&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@multipleValues) != 1">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined with multipleValues=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@nearestValue) != 1">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined with nearestValue=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="not(contains($extent, ',2000-01-01T00:00:00Z/2000-01-01T00:01:00Z/PT5S,'))">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined using extent value &quot;2000-01-01T00:00:00Z/2000-01-01T00:01:00Z/PT5S&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
</ctl:package>

