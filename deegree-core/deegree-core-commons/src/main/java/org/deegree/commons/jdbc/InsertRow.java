/*----------------------------------------------------------------------------
 This file is part of deegree, http://deegree.org/
 Copyright (C) 2001-2009 by:
 Department of Geography, University of Bonn
 and
 lat/lon GmbH

 This library is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation; either version 2.1 of the License, or (at your option)
 any later version.
 This library is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 details.
 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

 Contact information:

 lat/lon GmbH
 Aennchenstr. 19, 53177 Bonn
 Germany
 http://lat-lon.de/

 Department of Geography, University of Bonn
 Prof. Dr. Klaus Greve
 Postfach 1147, 53001 Bonn
 Germany
 http://www.geographie.uni-bonn.de/deegree/

 e-mail: info@deegree.org
 ----------------------------------------------------------------------------*/
package org.deegree.commons.jdbc;

import static org.deegree.commons.utils.JDBCUtils.close;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.deegree.commons.tom.sql.ParticleConversion;
import org.deegree.commons.utils.JDBCUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Encapsulates columns and values for inserting one row into a database table.
 *
 * @author <a href="mailto:schneider@lat-lon.de">Markus Schneider</a>
 */
public class InsertRow extends TransactionRow {

	private static Logger LOG = LoggerFactory.getLogger(InsertRow.class);

	protected final Map<SQLIdentifier, Object> columnToAutoKey = new HashMap<SQLIdentifier, Object>();

	protected SQLIdentifier autogenColumn;

	/**
	 * Creates a new {@link InsertRow} instance.
	 * @param table table targeted by the insert, must not be <code>null</code>
	 * @param autoGenColumn column with auto generation, can be <code>null</code> (no
	 * auto-generated columns)
	 */
	public InsertRow(TableName table, SQLIdentifier autoGenColumn) {
		super(table);
		this.autogenColumn = autoGenColumn;
	}

	@Override
	public Object get(SQLIdentifier column) {
		if (columnToObject.containsKey(column)) {
			return columnToObject.get(column);
		}
		return columnToAutoKey.get(column);
	}

	@Override
	public String getSql() {
		StringBuilder sql = new StringBuilder("INSERT INTO " + table + "(");
		boolean first = true;
		for (SQLIdentifier column : columnToLiteral.keySet()) {
			if (!first) {
				sql.append(',');
			}
			else {
				first = false;
			}
			sql.append(column);
		}
		sql.append(") VALUES(");
		first = true;
		for (Entry<SQLIdentifier, String> entry : columnToLiteral.entrySet()) {
			if (!first) {
				sql.append(',');
			}
			else {
				first = false;
			}
			sql.append(entry.getValue());
		}
		sql.append(")");
		return sql.toString();
	}

	/**
	 * Performs the insertion and deals with autogenerated columns.
	 * @param conn JDBC connection to use for the insertion, must not be <code>null</code>
	 * @return autogenerated keys, can be empty, but never <code>null</code>
	 * @throws SQLException
	 */
	public Map<SQLIdentifier, Object> performInsert(Connection conn) throws SQLException {

		if (LOG.isDebugEnabled()) {
			LOG.debug("Inserting: " + this);
		}

		String sql = getSql();
		PreparedStatement stmt = null;
		if (autogenColumn == null) {
			stmt = conn.prepareStatement(sql);
		}
		else {
			// @Andreas: autogenColumn.toUpperCase () breaks on PostgreSQL
			stmt = conn.prepareStatement(sql, new String[] { autogenColumn.toString() });
		}
		try {
			int columnId = 1;
			for (Entry<SQLIdentifier, Object> entry : columnToObject.entrySet()) {
				if (entry.getValue() != null) {
					LOG.debug("- Argument " + entry.getKey() + " = " + entry.getValue() + " ("
							+ entry.getValue().getClass() + ")");
					if (entry.getValue() instanceof ParticleConversion<?>) {
						ParticleConversion<?> conversion = (ParticleConversion<?>) entry.getValue();
						conversion.setParticle(stmt, columnId++);
					}
					else {
						stmt.setObject(columnId++, entry.getValue());
					}
				}
				else {
					LOG.debug("- Argument " + entry.getKey() + " = NULL");
					stmt.setObject(columnId++, null);
				}
			}
			stmt.execute();

			if (autogenColumn != null) {
				ResultSet rs = null;
				try {
					rs = stmt.getGeneratedKeys();
					if (rs.next()) {
						Object key = rs.getObject(1);
						columnToAutoKey.put(autogenColumn, key);
						LOG.debug("Retrieved auto generated key: " + autogenColumn + "=" + key);
					}
				}
				finally {
					if (rs != null) {
						rs.close();
					}
				}
			}
		}
		finally {
			close(stmt);
		}

		return columnToAutoKey;
	}

	@Override
	public String toString() {
		StringBuilder sql = new StringBuilder("INSERT INTO " + table + "(");
		boolean first = true;
		for (SQLIdentifier column : columnToLiteral.keySet()) {
			if (!first) {
				sql.append(',');
			}
			else {
				first = false;
			}
			sql.append(column);
		}
		sql.append(") VALUES(");
		first = true;
		for (Entry<SQLIdentifier, String> entry : columnToLiteral.entrySet()) {
			if (!first) {
				sql.append(',');
			}
			else {
				first = false;
			}
			sql.append(entry.getValue());
		}
		sql.append(")");
		return sql.toString();
	}

}