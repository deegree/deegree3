<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by Clemens Portele (interactive instruments) -->
<xsd:schema targetNamespace="http://www.opengis.net/gml" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:gml="http://www.opengis.net/gml" elementFormDefault="qualified" version="3.00">
	<xsd:annotation>
		<xsd:documentation>GML 3.0 Subset schema for gml:AbstractFeatureType,gml:_Feature,gml:_FeatureCollection,gml:GeometryPropertyType,gml:PointPropertyType,gml:CurvePropertyType,gml:SurfacePropertyType,gml:MultiPoint,gml:MultiCurve,gml:MultiSurface,gml:MultiSurfacePropertyType,gml:CompositeCurve,gml:ReferenceType,gml:LengthType,gml:AreaType,gml:VolumeType,gml:AngleType,gml:ScaleType,gml:MeasureType,gml:LineString,gml:Curve,gml:LineStringSegment,gml:CubicSpline,gml:Arc,gml:Circle,gml:Polygon,gml:LinearRing,gml:Ring,gml:UnitOfMeasureType,gml:Dictionary,gml:Definition,gml:DefinitionCollection,gml:definitionMember,gml:MultiPointCoverage,gml:RectifiedGridCoverage,gml:MultiPointCoverageType,gml:RectifiedGridCoverageType,  written by gmlSubset.xslt. Mit zusätzlichen, manuellen Änderungen zur Einschränkung von nicht benötigten Bestandteilen und zur Reduzierung von Freiheitsgraden.</xsd:documentation>
	</xsd:annotation>
	<xsd:import namespace="http://www.w3.org/1999/xlink" schemaLocation="../xlink/xlinks.xsd"/>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractFeatureType" abstract="true">
		<xsd:annotation>
			<xsd:documentation> An abstract feature provides a set of common properties, including id, metaDataProperty, name and description inherited from AbstractGMLType, plus boundedBy.    A concrete feature type must derive from this type and specify additional  properties in an application schema. A feature must possess an identifying attribute ('id' - 'fid' has been deprecated).  </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGMLType">
				<xsd:sequence>
					<xsd:element ref="gml:boundedBy" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractGMLType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>All complexContent GML elements are directly or indirectly derived from this abstract supertype 
	to establish a hierarchy of GML types that may be distinguished from other XML types by their ancestry. 
	Elements in this hierarchy may have an ID and are thus referenceable.  </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:description" minOccurs="0"/>
			<xsd:element ref="gml:name" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple names may be provided.  These will often be distinguished by being assigned by different authorities, as indicated by the value of the codeSpace attribute.  In an instance document there will usually only be one name per authority. </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute ref="gml:id" use="optional"/>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:attribute name="id" type="ID">
		<xsd:annotation>
			<xsd:documentation>Database handle for the object.  It is of XML type “ID”, so is constrained to be unique in the XML document within which it occurs.  An external identifier for the object in the form of a URI may be constructed using standard XML and XPointer methods.  This is done by concatenating the URI for the document, a fragment separator “#”, and the value of the id attribute.  </xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<!-- ================================================= -->
	<xsd:element name="_Object" abstract="true">
		<xsd:annotation>
			<xsd:documentation>This abstract element is the head of a substitutionGroup hierararchy which may contain either simpleContent or complexContent elements.  It is used to assert the model position of "class" elements declared in other GML schemas.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:attributeGroup name="AssociationAttributeGroup">
		<xsd:annotation>
			<xsd:documentation>Attribute group used to enable property elements to refer to their value remotely. It contains the “simple link” components from xlinks.xsd, with all members “optional”, and the remoteSchema attribute, which is also optional.  These attributes can be attached to any element, thus allowing it to act as a pointer. The 'remoteSchema' attribute allows an element  that carries link attributes to indicate that the element is declared  in a remote schema rather than by the schema that constrains the current document instance. </xsd:documentation>
		</xsd:annotation>
		<xsd:attributeGroup ref="xlink:simpleLink"/>
	</xsd:attributeGroup>
	<!-- ================================================= -->
	<xsd:element name="description" type="string">
		<xsd:annotation>
			<xsd:documentation>Contains a simple text description of the object, or refers to an external description.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="name" type="gml:CodeType">
		<xsd:annotation>
			<xsd:documentation>Identifier for the object, normally a descriptive name. An object may have several names, typically assigned by different authorities.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace. </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="CodeType">
		<xsd:annotation>
			<xsd:documentation>Name or code with an (optional) authority.  Text token.  
      If the codeSpace attribute is present, then its value should identify a dictionary, thesaurus 
      or authority for the term, such as the organisation who assigned the value, 
      or the dictionary from which it is taken.  
      A text string with an optional codeSpace attribute. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="string">
				<xsd:attribute name="codeSpace" type="anyURI" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="boundedBy" type="gml:BoundingShapeType"/>
	<!-- ================================================= -->
	<xsd:complexType name="BoundingShapeType">
		<xsd:annotation>
			<xsd:documentation>Bounding shape.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:group ref="gml:boundingShape"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:group name="boundingShape">
		<xsd:choice>
			<xsd:element ref="gml:Envelope"/>
			<xsd:element ref="gml:Null"/>
		</xsd:choice>
	</xsd:group>
	<!-- ================================================= -->
	<xsd:element name="Envelope" type="gml:EnvelopeType" substitutionGroup="gml:_Geometry"/>
	<!-- ================================================= -->
	<xsd:complexType name="EnvelopeType">
		<xsd:annotation>
			<xsd:documentation>Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element ref="gml:pos" minOccurs="2" maxOccurs="2"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractGeometryType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>All geometry elements are derived directly or indirectly from this abstract supertype. A geometry element may have an identifying attribute ("gml:id"), a name (attribute "name") and a description (attribute "description"). It may be associated with a spatial reference system (attribute "srsName"). The following rules shall be adhered: - Every geometry type shall derive from this abstract type. - Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the substitution group of _Geometry.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGMLType">
				<xsd:attribute name="srsName" type="anyURI" use="optional">
					<xsd:annotation>
						<xsd:documentation>In general this reference points to a CRS instance of gml:CoordinateReferenceSystemType (see coordinateReferenceSystems.xsd). For well known references it is not required that the CRS description exists at the location the URI points to (Note: These "WKCRS"-ids still have to be specified).  If no srsName attribute is given, the CRS must be specified as part of the larger context this geometry element is part of, e.g. a geometric aggregate.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ============================================================== -->
	<xsd:complexType name="GeometryPropertyType">
		<xsd:annotation>
			<xsd:documentation>A geometric property can either be any geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Note that either the reference or the contained element must be given, but not both or none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Geometry"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="pos" type="gml:DirectPositionType"/>
	<!-- ================================================= -->
	<xsd:complexType name="DirectPositionType">
		<xsd:annotation>
			<xsd:documentation>DirectPosition instances hold the coordinates for a position within some coordinate reference system (CRS). Since DirectPositions, as data types, will often be included in larger objects (such as geometry elements) that have references to CRS, the "srsName" attribute will in general be missing, if this particular DirectPosition is included in a larger element with such a reference to a CRS. In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:doubleList">
				<xsd:attribute name="srsName" type="anyURI" use="optional">
					<xsd:annotation>
						<xsd:documentation>In general this reference points to a CRS instance of gml:CoordinateReferenceSystemType (see coordinateReferenceSystems.xsd). For well known references it is not required that the CRS description exists at the location the URI points to (Note: These "WKCRS"-ids still have to be specified).  If no srsName attribute is given, the CRS must be specified as part of the larger context this geometry element is part of, e.g. a geometric element like point, curve, etc. It is expected that the attribute will be specified at the direct position level only in rare cases.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:simpleType name="doubleList">
		<xsd:annotation>
			<xsd:documentation>XML List based on XML Schema double type.  An element of this type contains a space-separated list of double values</xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="double"/>
	</xsd:simpleType>
	<!-- ================================================= -->
	<!-- ================================================= -->
	<xsd:element name="_Geometry" type="gml:AbstractGeometryType" abstract="true" substitutionGroup="gml:_GML">
		<xsd:annotation>
			<xsd:documentation>The "_Geometry" element is the abstract head of the substituition group for all geometry elements of GML 3. This includes pre-defined and user-defined geometry elements. Any geometry element must be a direct or indirect extension/restriction of AbstractGeometryType and must be directly or indirectly in the substitution group of "_Geometry".</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="_GML" type="gml:AbstractGMLType" abstract="true" substitutionGroup="gml:_Object">
		<xsd:annotation>
			<xsd:documentation>Global element which acts as the head of a substitution group that may include any element which is a GML feature, object, geometry or complex value</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="Null" type="gml:NullType"/>
	<!-- ================================================= -->
	<xsd:simpleType name="NullType">
		<xsd:annotation>
			<xsd:documentation>Utility type for null elements.  The value may be selected from one of the enumerated tokens, or may be a URI in which case this should identify a resource which describes the reason for the null. </xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="gml:NullEnumeration anyURI"/>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:simpleType name="NullEnumeration">
		<xsd:annotation>
			<xsd:documentation> Some common reasons for a null value:   
			
        innapplicable - the object does not have a value
        missing - The correct value is not readily available to the sender of this data.  
                           Furthermore, a correct value may not exist.
        template - the value will be available later
        unknown - The correct value is not known to, and not computable by, the sender of this data. 
                           However, a correct value probably exists.
        withheld - the value is not divulged 
        
        Specific communities may agree to assign more strict semantics when these terms are used in a particular context.  
      </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="inapplicable"/>
			<xsd:enumeration value="missing"/>
			<xsd:enumeration value="template"/>
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="withheld"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="_Feature" type="gml:AbstractFeatureType" abstract="true" substitutionGroup="gml:_GML"/>
	<!-- ================================================= -->
	<xsd:element name="_FeatureCollection" type="gml:AbstractFeatureCollectionType" abstract="true" substitutionGroup="gml:_Feature"/>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractFeatureCollectionType" abstract="true">
		<xsd:annotation>
			<xsd:documentation> A feature collection contains zero or more features.  </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:BoundedFeatureType">
				<xsd:sequence>
					<xsd:element ref="gml:featureMember" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="BoundedFeatureType" abstract="true">
		<xsd:annotation>
			<xsd:documentation> Makes boundedBy mandatory - used to build Feature Collections </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="gml:AbstractFeatureType">
				<xsd:sequence>
					<xsd:element ref="gml:description" minOccurs="0"/>
					<xsd:element ref="gml:name" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element ref="gml:boundedBy"/>
				</xsd:sequence>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="featureMember" type="gml:FeaturePropertyType"/>
	<!-- ================================================= -->
	<xsd:complexType name="FeaturePropertyType">
		<xsd:annotation>
			<xsd:documentation>Container for a feature - follow gml:AssociationType pattern.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Feature"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="PointPropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a point as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:Point"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Point" type="gml:PointType" substitutionGroup="gml:_GeometricPrimitive"/>
	<!-- ================================================= -->
	<xsd:complexType name="PointType">
		<xsd:annotation>
			<xsd:documentation>A Point is defined by a single coordinate tuple.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricPrimitiveType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element ref="gml:pos"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractGeometricPrimitiveType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>This is the abstract root type of the geometric primitives. A geometric primitive is a geometric object that is not decomposed further into other primitives in the system. All primitives are oriented in the direction implied by the sequence of their coordinate tuples.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_GeometricPrimitive" type="gml:AbstractGeometricPrimitiveType" abstract="true" substitutionGroup="gml:_Geometry">
		<xsd:annotation>
			<xsd:documentation>The "_GeometricPrimitive" element is the abstract head of the substituition group for all (pre- and user-defined) geometric primitives.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="CurvePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a curve as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Curve"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_Curve" type="gml:AbstractCurveType" abstract="true" substitutionGroup="gml:_GeometricPrimitive">
		<xsd:annotation>
			<xsd:documentation>The "_Curve" element is the abstract head of the substituition group for all (continuous) curve elements.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractCurveType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>An abstraction of a curve to support the different levels of complexity. The curve can always be viewed as a geometric primitive, i.e. is continuous.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricPrimitiveType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="SurfacePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a surface as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Surface"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_Surface" type="gml:AbstractSurfaceType" abstract="true" substitutionGroup="gml:_GeometricPrimitive">
		<xsd:annotation>
			<xsd:documentation>The "_Surface" element is the abstract head of the substituition group for all (continuous) surface elements.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractSurfaceType">
		<xsd:annotation>
			<xsd:documentation>
				An abstraction of a surface to support the different levels of complexity. A surface is always a continuous region of a plane.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricPrimitiveType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="MultiPoint" type="gml:MultiPointType" substitutionGroup="gml:_GeometricAggregate"/>
	<!-- ================================================= -->
	<xsd:complexType name="MultiPointType">
		<xsd:annotation>
			<xsd:documentation>
				A MultiPoint is defined by one or more Points, referenced through pointMember elements.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricAggregateType">
				<xsd:sequence>
					<xsd:annotation>
						<xsd:documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="gml:pointMember" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractGeometricAggregateType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>This is the abstract root type of the geometric aggregates.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="pointMember" type="gml:PointPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element either references a Point via the XLink-attributes or contains the Point element.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="_GeometricAggregate" type="gml:AbstractGeometricAggregateType" abstract="true" substitutionGroup="gml:_Geometry">
		<xsd:annotation>
			<xsd:documentation>The "_GeometricAggregate" element is the abstract head of the substituition group for all geometric aggremates.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="MultiCurve" type="gml:MultiCurveType" substitutionGroup="gml:_GeometricAggregate"/>
	<!-- ================================================= -->
	<xsd:complexType name="MultiCurveType">
		<xsd:annotation>
			<xsd:documentation>
				A MultiCurve is defined by one or more Curves, referenced through curveMember elements.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricAggregateType">
				<xsd:sequence>
					<xsd:annotation>
						<xsd:documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="gml:curveMember" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="curveMember" type="gml:CurvePropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element either references a curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for "_Curve".</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="MultiCurvePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a collection of curves as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:MultiCurve"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="MultiSurface" type="gml:MultiSurfaceType" substitutionGroup="gml:_GeometricAggregate"/>
	<!-- ================================================= -->
	<xsd:complexType name="MultiSurfaceType">
		<xsd:annotation>
			<xsd:documentation>
				A MultiSurface is defined by one or more Surfaces, referenced through surfaceMember elements. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometricAggregateType">
				<xsd:sequence>
					<xsd:annotation>
						<xsd:documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="gml:surfaceMember" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="surfaceMember" type="gml:SurfacePropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for "_Surface".</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="MultiSurfacePropertyType">
		<xsd:annotation>
			<xsd:documentation>A property that has a collection of surfaces as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:MultiSurface"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="CompositeCurve" type="gml:CompositeCurveType" substitutionGroup="gml:_Curve"/>
	<!-- ================================================= -->
	<xsd:complexType name="CompositeCurveType">
		<xsd:annotation>
			<xsd:documentation>
				A CompositeCurve is defined by a sequence of (orientable) curves such that the each curve in the sequence terminates at the start point of the subsequent curve in the list.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveType">
				<xsd:sequence>
					<xsd:element ref="gml:curveMember" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>This element references or contains one curve in the composite curve. The curves are contiguous, the collection of curves is ordered.
NOTE: This definition allows for a nested structure, i.e. a CompositeCurve may use, for example, another CompositeCurve as a curve member.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="ReferenceType">
		<xsd:annotation>
			<xsd:documentation>  A pattern or base for derived types used to specify complex types corresponding to a UML aggregation association.  An instance of this type serves as a pointer to a remote Object.  
 </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence/>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup"/>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="LengthType">
		<xsd:annotation>
			<xsd:documentation>Value of a length (or distance) quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:MeasureType"/>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="MeasureType">
		<xsd:annotation>
			<xsd:documentation>Number with a scale.  
      The value of uom (Units Of Measure) attribute is a reference to a Reference System for the amount, either a ratio or position scale. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="double">
				<xsd:attribute name="uom" type="anyURI" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AreaType">
		<xsd:annotation>
			<xsd:documentation>Value of a spatial area quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for an area, such as square metres or square miles. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:MeasureType"/>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="VolumeType">
		<xsd:annotation>
			<xsd:documentation>Value of a spatial volume quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a volume, such as cubic metres or cubic feet. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:MeasureType"/>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AngleType">
		<xsd:annotation>
			<xsd:documentation>Value of an angle quantity recorded as a single number, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for an angle, such as degrees or radians. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:MeasureType"/>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="ScaleType">
		<xsd:annotation>
			<xsd:documentation>Value of a scale factor (or ratio) that has no physical unit. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a scale factor, such as percent, permil, or parts-per-million. </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="gml:MeasureType"/>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="LineString" type="gml:LineStringType" substitutionGroup="gml:_Curve"/>
	<!-- ================================================= -->
	<xsd:complexType name="LineStringType">
		<xsd:annotation>
			<xsd:documentation> 				A LineString is a special curve that consists of a single segment with linear interpolation. It is defined by two or more coordinate tuples, with linear interpolation between them. It is backwards compatible with the LineString of GML 2, GM_LineString of ISO 19107 is implemented by LineStringSegment. 			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveType">
				<xsd:sequence>
					<xsd:element ref="gml:pos" minOccurs="2" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Curve" type="gml:CurveType" substitutionGroup="gml:_Curve"/>
	<!-- ================================================= -->
	<xsd:complexType name="CurveType">
		<xsd:annotation>
			<xsd:documentation>
				Curve is a 1-dimensional primitive. Curves are continuous, connected, and have a measurable length in terms of the coordinate system. 
				A curve is composed of one or more curve segments. Each curve segment within a curve may be defined using a different interpolation method. The curve segments are connected to one another, with the end point of each segment except the last being the start point of the next segment in the segment list.
				The orientation of the curve is positive.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveType">
				<xsd:sequence>
					<xsd:element ref="gml:segments">
						<xsd:annotation>
							<xsd:documentation>This element encapsulates the segments of the curve.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="segments" type="gml:CurveSegmentArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="CurveSegmentArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of curve segments.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_CurveSegment" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_CurveSegment" type="gml:AbstractCurveSegmentType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>The "_CurveSegment" element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractCurveSegmentType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				Curve segment defines a homogeneous segment of a curve.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="numDerivativesAtStart" type="integer" use="optional" default="0">
			<xsd:annotation>
				<xsd:documentation>The attribute "numDerivativesAtStart" specifies the type of continuity between this curve segment and its predecessor. If this is the first curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="numDerivativesAtEnd" type="integer" use="optional" default="0">
			<xsd:annotation>
				<xsd:documentation>The attribute "numDerivativesAtEnd" specifies the type of continuity between this curve segment and its successor. If this is the last curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="numDerivativeInterior" type="integer" use="optional" default="0">
			<xsd:annotation>
				<xsd:documentation>The attribute "numDerivativesInterior" specifies the type of continuity that is guaranteed interior to the curve. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="LineStringSegment" type="gml:LineStringSegmentType" substitutionGroup="gml:_CurveSegment"/>
	<!-- ================================================= -->
	<xsd:complexType name="LineStringSegmentType">
		<xsd:annotation>
			<xsd:documentation>
				A LineStringSegment is a curve segment that is defined by two or more coordinate tuples, with linear interpolation between them.
				Note: LineStringSegment implements GM_LineString of ISO 19107.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveSegmentType">
				<xsd:sequence>
					<xsd:element ref="gml:pos" minOccurs="2" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="interpolation" type="gml:CurveInterpolationType" fixed="linear">
					<xsd:annotation>
						<xsd:documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a LineStringSegment the interpolation is fixed as "linear".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:simpleType name="CurveInterpolationType">
		<xsd:annotation>
			<xsd:documentation>CurveInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="linear"/>
			<xsd:enumeration value="circularArc3Points"/>
			<xsd:enumeration value="cubicSpline"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="CubicSpline" type="gml:CubicSplineType" substitutionGroup="gml:_CurveSegment"/>
	<!-- ================================================= -->
	<xsd:complexType name="CubicSplineType">
		<xsd:annotation>
			<xsd:documentation>
				Cubic splines are similar to line strings in that they are a sequence of segments each with its own defining function. A cubic spline uses the control points and a set of derivative parameters to define a piecewise 3rd degree polynomial interpolation. Unlike line-strings, the parameterization by arc length is not necessarily still a polynomial. 
				The function describing the curve must be C2, that is, have a continuous 1st and 2nd derivative at all points, and pass through the controlPoints in the order given. Between the control points, the curve segment is defined by a cubic polynomial. At each control point, the polynomial changes in such a manner that the 1st and 2nd derivative vectors are the same from either side. The control parameters record must contain vectorAtStart, and vectorAtEnd which are the unit tangent vectors at controlPoint[1] and controlPoint[n] where n = controlPoint.count. 
				Note: only the direction of the vectors is relevant, not their length.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveSegmentType">
				<xsd:sequence>
					<xsd:element ref="gml:pos" minOccurs="3" maxOccurs="unbounded"/>
					<xsd:element name="vectorAtStart" type="gml:VectorType">
						<xsd:annotation>
							<xsd:documentation>"vectorAtStart" is the unit tangent vector at the start point of the spline.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="vectorAtEnd" type="gml:VectorType">
						<xsd:annotation>
							<xsd:documentation>"vectorAtEnd" is the unit tangent vector at the end point of the spline.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="interpolation" type="gml:CurveInterpolationType" fixed="cubicSpline">
					<xsd:annotation>
						<xsd:documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a CubicSpline the interpolation is fixed as "cubicSpline".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="degree" type="integer" fixed="3">
					<xsd:annotation>
						<xsd:documentation>The degree for a cubic spline is "3".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="VectorType">
		<xsd:annotation>
			<xsd:documentation>A Vector is an ordered set of numbers called coordinates that represent a position in a coordinate reference system (CRS). For some application the components of the position may be adjusted to yield a unit vector.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:restriction base="gml:DirectPositionType"/>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Arc" type="gml:ArcType" substitutionGroup="gml:ArcString"/>
	<!-- ================================================= -->
	<xsd:complexType name="ArcType">
		<xsd:annotation>
			<xsd:documentation>
				An Arc is an arc string with only one arc unit, i.e. three control points.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="gml:ArcStringType">
				<xsd:sequence>
					<xsd:element ref="gml:pos" minOccurs="3" maxOccurs="3"/>
				</xsd:sequence>
				<xsd:attribute name="numArc" type="integer" use="optional" fixed="1">
					<xsd:annotation>
						<xsd:documentation>An arc is an arc string consiting of a single arc, the attribute is fixed to "1".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="ArcStringType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				An ArcString is a curve segment that uses three-point circular arc interpolation.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCurveSegmentType">
				<xsd:sequence>
					<xsd:element ref="gml:pos" minOccurs="3" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="interpolation" type="gml:CurveInterpolationType" fixed="circularArc3Points">
					<xsd:annotation>
						<xsd:documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcString the interpolation is fixed as "circularArc3Points".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numArc" type="integer" use="optional">
					<xsd:annotation>
						<xsd:documentation>The number of arcs in the arc string can be explicitly stated in this attribute. The number of control points in the arc string must be 2 * numArc + 1.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="ArcString" type="gml:ArcStringType" abstract="true" substitutionGroup="gml:_CurveSegment"/>
	<!-- ================================================= -->
	<xsd:element name="Circle" type="gml:CircleType" substitutionGroup="gml:Arc"/>
	<!-- ================================================= -->
	<xsd:complexType name="CircleType">
		<xsd:annotation>
			<xsd:documentation>
				A Circle is an arc whose first and last control points coincide to form a full circle. The "start" and "end" bearing are equal and shall be the bearing for the first controlPoint listed. Note: This still requires at least 3 distinct non-co-linear points to be unambiguously defined. The arc is simply extended until the first point is encountered.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:ArcType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="Surface" type="gml:SurfaceType" substitutionGroup="gml:_Surface"/>
	<!-- =========================================================== -->
	<xsd:complexType name="SurfaceType">
		<xsd:annotation>
			<xsd:documentation>
				A Surface is a 2-dimensional primitive and is composed of one or more surface patches. The surface patches are connected to one another.
				The orientation of the surface is positive ("up"). The orientation of a surface chooses an "up" direction through the choice of the upward normal, which, if the surface is not a cycle, is the side of the surface from which the exterior boundary appears counterclockwise. Reversal of the surface orientation reverses the curve orientation of each boundary component, and interchanges the conceptual "up" and "down" direction of the surface. If the surface is the boundary of a solid, the "up" direction is usually outward. For closed surfaces, which have no boundary, the up direction is that of the surface patches, which must be consistent with one another. Its included surface patches describe the interior structure of the Surface.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractSurfaceType">
				<xsd:sequence>
					<xsd:element ref="gml:patches">
						<xsd:annotation>
							<xsd:documentation>This element encapsulates the patches of the surface.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="_SurfacePatch" type="gml:AbstractSurfacePatchType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>The "_SurfacePatch" element is the abstract head of the substituition group for all surface pach elements describing a continuous portion of a surface.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="AbstractSurfacePatchType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				A surface patch defines a homogenuous portion of a surface.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="patches" type="gml:SurfacePatchArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>This property element contains a list of surface patches. The order of the elements is significant and shall be preserved when processing the array.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- =========================================================== -->
	<xsd:complexType name="SurfacePatchArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>A container for an array of surface patches.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_SurfacePatch" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:element name="PolygonPatch" type="gml:PolygonPatchType" substitutionGroup="gml:_SurfacePatch"/>
	<!-- =========================================================== -->
	<xsd:complexType name="PolygonPatchType">
		<xsd:annotation>
			<xsd:documentation>
				A PolygonPatch is a surface patch that is defined by a set of boundary curves and an underlying surface to which these curves adhere. The curves are coplanar and the polygon uses planar interpolation in its interior. Implements GM_Polygon of ISO 19107. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractSurfacePatchType">
				<xsd:sequence>
					<xsd:element ref="gml:exterior"/>
					<xsd:element ref="gml:interior" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="interpolation" type="gml:SurfaceInterpolationType" fixed="planar">
					<xsd:annotation>
						<xsd:documentation>The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =========================================================== -->
	<xsd:simpleType name="SurfaceInterpolationType">
		<xsd:annotation>
			<xsd:documentation>SurfaceInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="planar"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="Polygon" type="gml:PolygonType" substitutionGroup="gml:_Surface"/>
	<!-- ================================================= -->
	<xsd:complexType name="PolygonType">
		<xsd:annotation>
			<xsd:documentation>A Polygon is a special surface that is defined by a single surface patch. The boundary of this patch is coplanar and the polygon uses planar interpolation in its interior. It is backwards compatible with the Polygon of GML 2, GM_Polygon of ISO 19107 is implemented by PolygonPatch.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractSurfaceType">
				<xsd:sequence>
					<xsd:element ref="gml:exterior"/>
					<xsd:element ref="gml:interior" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="exterior" type="gml:AbstractRingPropertyType">
		<xsd:annotation>
			<xsd:documentation>A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractRingPropertyType">
		<xsd:annotation>
			<xsd:documentation>
			        Encapsulates a ring to represent the surface boundary property of a surface.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Ring"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_Ring" type="gml:AbstractRingType" abstract="true" substitutionGroup="gml:_Geometry">
		<xsd:annotation>
			<xsd:documentation>The "_Ring" element is the abstract head of the substituition group for all closed boundaries of a surface patch.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractRingType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				An abstraction of a ring to support surface boundaries of different complexity.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="interior" type="gml:AbstractRingPropertyType">
		<xsd:annotation>
			<xsd:documentation>A boundary of a surface consists of a number of rings. The "interior" rings seperate the surface / surface patch from the area enclosed by the rings.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="LinearRing" type="gml:LinearRingType" substitutionGroup="gml:_Ring"/>
	<!-- ================================================= -->
	<xsd:complexType name="LinearRingType">
		<xsd:annotation>
			<xsd:documentation>A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates must be coincident.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractRingType">
				<xsd:sequence>
					<xsd:element ref="gml:pos" minOccurs="4" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Ring" type="gml:RingType" substitutionGroup="gml:_Ring"/>
	<!-- ================================================= -->
	<xsd:complexType name="RingType">
		<xsd:annotation>
			<xsd:documentation>A Ring is used to represent a single connected component of a surface boundary. It consists of a sequence of curves connected in a cycle (an object whose boundary is empty).
A Ring is structurally similar to a composite curve in that the endPoint of each curve in the sequence is the startPoint of the next curve in the Sequence. Since the sequence is circular, there is no exception to this rule. Each ring, like all boundaries, is a cycle and each ring is simple.
NOTE: Even though each Ring is simple, the boundary need not be simple. The easiest case of this is where one of the interior rings of a surface is tangent to its exterior ring.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractRingType">
				<xsd:sequence>
					<xsd:element ref="gml:curveMember" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>This element references or contains one curve in the composite curve. The curves are contiguous, the collection of curves is ordered.
NOTE: This definition allows for a nested structure, i.e. a CompositeCurve may use, for example, another CompositeCurve as a curve member.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="UnitOfMeasureType">
		<xsd:annotation>
			<xsd:documentation>Reference to a unit of measure definition that applies to all the numerical values described by the element containing this element. Notice that a complexType which needs to include the uom attribute can do so by extending this complexType. Alternately, this complexType can be used as a pattern for a new complexType. </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence/>
		<xsd:attribute name="uom" type="anyURI" use="required">
			<xsd:annotation>
				<xsd:documentation>Reference to a unit of measure definition, usually within the same XML document but possibly outside the XML document which contains this reference. For a reference within the same XML document, the "#" symbol should be used, followed by a text abbreviation of the unit name. However, the "#" symbol may be optional, and still may be interpreted as a reference. </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Dictionary" type="gml:DictionaryType" substitutionGroup="gml:Definition"/>
	<!-- ================================================= -->
	<xsd:complexType name="DictionaryType">
		<xsd:annotation>
			<xsd:documentation>A non-abstract collection that is specialized for use as a dictionary which contains a collection of definitions. These definitions are referenced from other places, in the same and different XML documents. In this restricted type, the inherited optional "description" element can be used for a description of this dictionary. The inherited optional "name" element can be used for the name(s) of this dictionary. The inherited "metaDataProperty" elements can be used to reference or include more information about this dictionary. The inherited required gml:id attribute allows the dictionary to be referenced using this handle. </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:DefinitionType">
				<xsd:choice minOccurs="0" maxOccurs="unbounded">
					<xsd:element ref="gml:dictionaryEntry">
						<xsd:annotation>
							<xsd:documentation>An entry in this dictionary. 
              
              This element follows the standard GML property model, 
              so the value may be provided directly or by reference.  
              
              Note that if the value is provided by reference, this definition does not carry 
              a handle (gml:id) in this context, so does *not* allow external references to 
              this specific entry in this context.  When used in this way the referenced 
              definition will usually be in a dictionary in the same XML document. 
              
              The content of an entry can itself be a lower level dictionary or definition collection. 
              </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:choice>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="DefinitionType">
		<xsd:annotation>
			<xsd:documentation>A definition, which can be included in or referenced by a dictionary. In this extended type, the inherited "description" optional element can hold the definition whenever only text is needed. The inherited "name" elements can provide one or more brief terms for which this is the definition. The inherited "metaDataProperty" elements can be used to reference or include more information about this definition.  
The gml:id attribute is required - it must be possible to reference this definition using this handle.  </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="gml:AbstractGMLType">
				<xsd:sequence>
					<xsd:element ref="gml:description" minOccurs="0"/>
					<xsd:element ref="gml:name" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute ref="gml:id" use="required"/>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="dictionaryEntry" type="gml:DictionaryEntryType"/>
	<!-- ================================================= -->
	<xsd:complexType name="DictionaryEntryType">
		<xsd:annotation>
			<xsd:documentation>An entry in a dictionary of definitions. An instance of this type contains or refers to a definition object.  

The number of definitions contained in this dictionaryEntry is restricted to one, but a DefinitionCollection or Dictionary that contains multiple definitions may substitute if required. Specialized descendents of this dictionaryEntry might be restricted in an application schema to allow only including specified types of definitions as valid entries in a dictionary. </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:Definition" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>This element in a dictionary entry contains the actual definition. </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attributeGroup ref="gml:AssociationAttributeGroup"/>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Definition" type="gml:DefinitionType" substitutionGroup="gml:_GML"/>
	<!-- ================================================= -->
	<xsd:element name="DefinitionCollection" type="gml:DictionaryType" substitutionGroup="gml:Definition"/>
	<!-- ================================================= -->
	<xsd:element name="definitionMember" type="gml:DictionaryEntryType" substitutionGroup="gml:dictionaryEntry"/>
	<!-- ================================================= -->
	<xsd:element name="MultiPointCoverage" type="gml:MultiPointCoverageType" substitutionGroup="gml:_Coverage"/>
	<!-- ================================================= -->
	<xsd:complexType name="MultiPointCoverageType">
		<xsd:annotation>
			<xsd:documentation>A discrete coverage type whose domain is defined by a collection of point
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="gml:AbstractCoverageType">
				<xsd:sequence>
					<xsd:element ref="gml:description" minOccurs="0"/>
					<xsd:element ref="gml:name" minOccurs="0"/>
					<xsd:element ref="gml:boundedBy"/>
					<xsd:element ref="gml:multiPointDomain"/>
					<xsd:element ref="gml:rangeSet"/>
					<xsd:element ref="gml:coverageFunction" minOccurs="0"/>
				</xsd:sequence>
				<xsd:attribute name="dimension" type="positiveInteger" use="required"/>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractCoverageRestrictionType" abstract="true">
		<xsd:complexContent>
			<xsd:restriction base="gml:AbstractFeatureType">
				<xsd:sequence>
					<xsd:element ref="gml:description" minOccurs="0"/>
					<xsd:element ref="gml:name" minOccurs="0"/>
					<xsd:element ref="gml:boundedBy"/>
				</xsd:sequence>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="AbstractCoverageType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>A coverage is a set of attribute values (its range) associated to position within a bounded space (its domain). This coverage uses a single coverage function to associate an element from the domain with an element from its range.  This definition conforms to ISO 19123.  Note that coverage is a GML feature.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractCoverageRestrictionType">
				<xsd:sequence>
					<xsd:element ref="gml:domainSet"/>
					<xsd:element ref="gml:rangeSet"/>
					<xsd:element ref="gml:coverageFunction" minOccurs="0"/>
				</xsd:sequence>
				<xsd:attribute name="dimension" type="positiveInteger" use="optional"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="domainSet" type="gml:DomainSetType"/>
	<!-- ================================================= -->
	<xsd:complexType name="DomainSetType">
		<xsd:annotation>
			<xsd:documentation>The spatiotemporal domain of a coverage.  
  Typically 
  * a geometry collection, 
  * an implicit geometry (e.g. a grid), 
  * an explicit or implicit collection of time instances or periods, or
  * the geometries associated with a feature collection.  

N.B. Temporal domains still to be implemented.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Geometry"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="rangeSet" type="gml:RangeSetType"/>
	<!-- ================================================= -->
	<xsd:complexType name="RangeSetType">
		<xsd:choice>
			<xsd:element ref="gml:DataBlock">
				<xsd:annotation>
					<xsd:documentation>Its tuple list holds the values as space-separated tuples each of which contains comma-separated components, and the tuple structure is specified using the rangeParameters property.  
</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="gml:File">
				<xsd:annotation>
					<xsd:documentation>a reference to an external source for the data, together with a description of how that external source is structured
</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="CompositeValueType">
		<xsd:annotation>
			<xsd:documentation>Aggregate value built from other Values using the Composite pattern. It contains zero or an arbitrary number of valueComponent elements, and zero or one valueComponents elements.  It may be used for strongly coupled aggregates (vectors, tensors) or for arbitrary collections of values.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGMLType">
				<xsd:sequence>
					<xsd:element ref="gml:valueComponents" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:group name="Value">
		<xsd:choice>
			<xsd:element ref="gml:_Value"/>
			<xsd:element ref="gml:_Geometry"/>
			<xsd:element ref="gml:Null"/>
		</xsd:choice>
	</xsd:group>
	<!-- ================================================= -->
	<xsd:element name="_Value" abstract="true" substitutionGroup="gml:_Object">
		<xsd:annotation>
			<xsd:documentation>Abstract element which acts as the head of a substitution group which contains _ScalarValue, _ScalarValueList and CompositeValue and (transitively) the elements in their substitution groups.  This element may be used in an application schema as a variable, so that in an XML instance document any member of its substitution group may occur.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="valueComponents" type="gml:ValueArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>Element which refers to, or contains, a set of homogeneously typed Values. </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:complexType name="ValueArrayPropertyType">
		<xsd:annotation>
			<xsd:documentation>GML property which refers to, or contains, a set of homogeneously typed Values. </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:group ref="gml:Value" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="CompositeValue" type="gml:CompositeValueType" substitutionGroup="gml:_Value">
		<xsd:annotation>
			<xsd:documentation>Aggregate value built using the Composite pattern.  </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ================================================= -->
	<xsd:element name="DataBlock" type="gml:DataBlockType"/>
	<!-- ================================================= -->
	<xsd:complexType name="DataBlockType">
		<xsd:sequence>
			<xsd:element ref="gml:rangeParameters"/>
			<xsd:element ref="gml:tupleList"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="rangeParameters" type="gml:RangeParametersType"/>
	<!-- ================================================= -->
	<xsd:complexType name="RangeParametersType">
		<xsd:annotation>
			<xsd:documentation>
      Metadata about the rangeSet.  Definition of record structure.   
      This is required if the rangeSet is encoded in a DataBlock.  
      We use a gml:_Value with empty values as a map of the composite value structure.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="gml:_Value"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="tupleList" type="gml:CoordinatesType"/>
	<!-- =========================================================== -->
	<xsd:complexType name="CoordinatesType">
		<xsd:annotation>
			<xsd:documentation>Tables or arrays of tuples.  
        May be used for text-encoding of values from a table.  
        Actually just a string, but allows the user to indicate which characters are used as separators.  
        The value of the 'cs' attribute is the separator for coordinate values, 
        and the value of the 'ts' attribute gives the tuple separator (a single space by default); 
        the default values may be changed to reflect local usage.
        Defaults to CSV within a tuple, space between tuples.  
        However, any string content will be schema-valid.  </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="string">
				<xsd:attribute name="decimal" type="string" default="."/>
				<xsd:attribute name="cs" type="string" default=","/>
				<xsd:attribute name="ts" type="string" default="&#x20;"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="File" type="gml:FileType"/>
	<!-- ================================================= -->
	<xsd:complexType name="FileType">
		<xsd:sequence>
			<xsd:element ref="gml:rangeParameters"/>
			<xsd:element name="fileName" type="anyURI"/>
			<xsd:element name="fileStructure" type="gml:FileValueModelType"/>
			<xsd:element name="mimeType" type="anyURI" minOccurs="0"/>
			<xsd:element name="compression" type="anyURI" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:simpleType name="FileValueModelType">
		<xsd:annotation>
			<xsd:documentation>List of codes that identifies the file structure model for records stored in files.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="Record Interleaved"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:element name="coverageFunction" type="gml:CoverageFunctionType"/>
	<!-- ================================================= -->
	<xsd:complexType name="CoverageFunctionType">
		<xsd:annotation>
			<xsd:documentation>
      The function or rule which defines the map from members of the domainSet to the range.  
      More functions will be added to this list
    </xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<xsd:element ref="gml:GridFunction"/>
		</xsd:choice>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="GridFunction" type="gml:GridFunctionType"/>
	<!-- ================================================= -->
	<xsd:complexType name="GridFunctionType">
		<xsd:annotation>
			<xsd:documentation>Defines how values in the domain are mapped to the range set. The start point and the sequencing rule are specified here.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="sequenceRule" type="gml:SequenceRuleType"/>
			<xsd:element name="startPoint" type="gml:integerList" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Index position of the first grid post.  If absent the startPoint is equal to the value of gridEnvelope::low from the grid definition.  </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="SequenceRuleType">
		<xsd:simpleContent>
			<xsd:extension base="gml:SequenceRuleNames">
				<xsd:attribute name="order" type="gml:IncrementOrder"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:simpleType name="SequenceRuleNames">
		<xsd:annotation>
			<xsd:documentation>List of codes (adopted from ISO 19123 Annex C) that identifies the rule for traversing a grid to correspond with the sequence of members of the rangeSet.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="Linear"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:simpleType name="IncrementOrder">
		<xsd:annotation>
			<xsd:documentation>The enumeration value here indicates the incrementation order  to be used on the first 2 axes, i.e. "+x-y" means that the points on the first axis are to be traversed from lowest to highest and  the points on the second axis are to be traversed from highest to lowest. The points on all other axes (if any) beyond the first 2 are assumed to increment from lowest to highest.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="string">
			<xsd:enumeration value="+x+y"/>
			<xsd:enumeration value="+y+x"/>
			<xsd:enumeration value="+x-y"/>
			<xsd:enumeration value="-x-y"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- ================================================= -->
	<xsd:simpleType name="integerList">
		<xsd:annotation>
			<xsd:documentation>XML List based on XML Schema integer type.  An element of this type contains a space-separated list of integer values</xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="integer"/>
	</xsd:simpleType>
	<!-- ================================================= -->
	<!-- ================================================= -->
	<xsd:element name="multiPointDomain" type="gml:MultiPointDomainType" substitutionGroup="gml:domainSet"/>
	<!-- ================================================= -->
	<xsd:complexType name="MultiPointDomainType">
		<xsd:complexContent>
			<xsd:restriction base="gml:DomainSetType">
				<xsd:sequence>
					<xsd:element ref="gml:MultiPoint"/>
				</xsd:sequence>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="_Coverage" type="gml:AbstractCoverageType" abstract="true" substitutionGroup="gml:_Feature"/>
	<!-- ================================================= -->
	<xsd:element name="RectifiedGridCoverage" type="gml:RectifiedGridCoverageType" substitutionGroup="gml:_Coverage"/>
	<!-- ================================================= -->
	<xsd:complexType name="RectifiedGridCoverageType">
		<xsd:complexContent>
			<xsd:restriction base="gml:AbstractCoverageType">
				<xsd:sequence>
					<xsd:element ref="gml:description" minOccurs="0"/>
					<xsd:element ref="gml:name" minOccurs="0"/>
					<xsd:element ref="gml:boundedBy"/>
					<xsd:element ref="gml:rectifiedGridDomain"/>
					<xsd:element ref="gml:rangeSet"/>
					<xsd:element ref="gml:coverageFunction" minOccurs="0"/>
				</xsd:sequence>
				<xsd:attribute name="dimension" type="positiveInteger" use="required"/>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="rectifiedGridDomain" type="gml:RectifiedGridDomainType" substitutionGroup="gml:domainSet"/>
	<!-- ================================================= -->
	<xsd:complexType name="RectifiedGridDomainType">
		<xsd:complexContent>
			<xsd:restriction base="gml:DomainSetType">
				<xsd:sequence>
					<xsd:element ref="gml:RectifiedGrid"/>
				</xsd:sequence>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="RectifiedGrid" type="gml:RectifiedGridType" substitutionGroup="gml:Grid"/>
	<!-- ================================================= -->
	<xsd:complexType name="RectifiedGridType">
		<xsd:annotation>
			<xsd:documentation>A rectified grid has an origin and vectors that define its post locations.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:GridType">
				<xsd:sequence>
					<xsd:element name="origin" type="gml:PointPropertyType"/>
					<xsd:element name="offsetVector" type="gml:VectorType" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="GridType">
		<xsd:annotation>
			<xsd:documentation>Implicitly defines an unrectified grid, which is a network composed of two or more sets of equally spaced parallel lines in which the members of each set intersect the members of the other sets at right angles.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="gml:AbstractGeometryType">
				<xsd:sequence>
					<xsd:element name="limits" type="gml:GridLimitsType"/>
					<xsd:element name="axisName" type="string" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="dimension" type="positiveInteger" use="required"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="GridLimitsType">
		<xsd:sequence>
			<xsd:element name="GridEnvelope" type="gml:GridEnvelopeType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:complexType name="GridEnvelopeType">
		<xsd:annotation>
			<xsd:documentation>Provides grid coordinate values for the diametrically opposed corners of an envelope that bounds a section of grid. The value of a single coordinate is the number of offsets from the origin of the grid in the direction of a specific axis.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="low" type="gml:integerList"/>
			<xsd:element name="high" type="gml:integerList"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================= -->
	<xsd:element name="Grid" type="gml:GridType" substitutionGroup="gml:_ImplicitGeometry"/>
	<!-- ================================================= -->
	<xsd:element name="_ImplicitGeometry" type="gml:AbstractGeometryType" abstract="true" substitutionGroup="gml:_Geometry"/>
	<!-- ================================================= -->
	<element name="_ScalarValue" abstract="true" substitutionGroup="gml:_Value">
		<annotation>
			<documentation>Abstract element which acts as the head of a substitution group which contains Boolean, Category, Count and Quantity, and (transitively) the elements in their substitution groups. This element may be used in an application schema as a variable, so that in an XML instance document any member of its substitution group may occur.</documentation>
		</annotation>
	</element>
	<element name="Quantity" type="gml:MeasureType" substitutionGroup="gml:_ScalarValue">
		<annotation>
			<documentation>A numeric value with a scale. The content of the element is an amount using the XML Schema type double which permits decimal or scientific notation. An XML attribute uom (“unit of measure”) is required, whose value is a URI which identifies the definition of the scale or units by which the numeric value must be multiplied.</documentation>
		</annotation>
	</element>
</xsd:schema>
